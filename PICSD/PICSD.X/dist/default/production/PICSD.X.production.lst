

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Feb 21 23:54:29 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	mediumconst
    33  007E70                     __pmediumconst:
    34                           	opt stack 0
    35  007E70  00                 	db	0
    36  007E71                     _dpowers:
    37                           	opt stack 0
    38  007E71  0001               	dw	1
    39  007E73  000A               	dw	10
    40  007E75  0064               	dw	100
    41  007E77  03E8               	dw	1000
    42  007E79  2710               	dw	10000
    43  007E7B                     __end_of_dpowers:
    44                           	opt stack 0
    45  007E7B                     _hexpowers:
    46                           	opt stack 0
    47  007E7B  0001               	dw	1
    48  007E7D  0010               	dw	16
    49  007E7F  0100               	dw	256
    50  007E81  1000               	dw	4096
    51  007E83                     __end_of_hexpowers:
    52                           	opt stack 0
    53  0000                     _LATBbits	set	3978
    54  0000                     _OSCCON	set	4051
    55  0000                     _PIE1bits	set	3997
    56  0000                     _PIR1bits	set	3998
    57  0000                     _RCSTA1	set	4011
    58  0000                     _RCSTA1bits	set	4011
    59  0000                     _SPBRG1	set	4015
    60  0000                     _SPBRGH1	set	4016
    61  0000                     _SSP1BUF	set	4041
    62  0000                     _SSP1CON1	set	4038
    63  0000                     _SSP1CON1bits	set	4038
    64  0000                     _SSP1STATbits	set	4039
    65  0000                     _TRISBbits	set	3987
    66  0000                     _TXREG1	set	4013
    67  0000                     _TXSTA1	set	4012
    68  0000                     _TXSTA1bits	set	4012
    69  007E83                     __stringdata:
    70                           	opt stack 0
    71  007E83                     STR_11:
    72  007E83  53                 	db	83	;'S'
    73  007E84  65                 	db	101	;'e'
    74  007E85  6E                 	db	110	;'n'
    75  007E86  64                 	db	100	;'d'
    76  007E87  69                 	db	105	;'i'
    77  007E88  6E                 	db	110	;'n'
    78  007E89  67                 	db	103	;'g'
    79  007E8A  20                 	db	32
    80  007E8B  43                 	db	67	;'C'
    81  007E8C  6F                 	db	111	;'o'
    82  007E8D  6D                 	db	109	;'m'
    83  007E8E  6D                 	db	109	;'m'
    84  007E8F  61                 	db	97	;'a'
    85  007E90  6E                 	db	110	;'n'
    86  007E91  64                 	db	100	;'d'
    87  007E92  20                 	db	32
    88  007E93  31                 	db	49	;'1'
    89  007E94  36                 	db	54	;'6'
    90  007E95  20                 	db	32
    91  007E96  46                 	db	70	;'F'
    92  007E97  61                 	db	97	;'a'
    93  007E98  69                 	db	105	;'i'
    94  007E99  6C                 	db	108	;'l'
    95  007E9A  65                 	db	101	;'e'
    96  007E9B  64                 	db	100	;'d'
    97  007E9C  2E                 	db	46
    98  007E9D  2E                 	db	46
    99  007E9E  2E                 	db	46
   100  007E9F  0D                 	db	13
   101  007EA0  0A                 	db	10
   102  007EA1  00                 	db	0
   103  007EA2                     STR_5:
   104  007EA2  53                 	db	83	;'S'
   105  007EA3  65                 	db	101	;'e'
   106  007EA4  6E                 	db	110	;'n'
   107  007EA5  64                 	db	100	;'d'
   108  007EA6  69                 	db	105	;'i'
   109  007EA7  6E                 	db	110	;'n'
   110  007EA8  67                 	db	103	;'g'
   111  007EA9  20                 	db	32
   112  007EAA  43                 	db	67	;'C'
   113  007EAB  6F                 	db	111	;'o'
   114  007EAC  6D                 	db	109	;'m'
   115  007EAD  6D                 	db	109	;'m'
   116  007EAE  61                 	db	97	;'a'
   117  007EAF  6E                 	db	110	;'n'
   118  007EB0  64                 	db	100	;'d'
   119  007EB1  20                 	db	32
   120  007EB2  30                 	db	48	;'0'
   121  007EB3  20                 	db	32
   122  007EB4  46                 	db	70	;'F'
   123  007EB5  61                 	db	97	;'a'
   124  007EB6  69                 	db	105	;'i'
   125  007EB7  6C                 	db	108	;'l'
   126  007EB8  65                 	db	101	;'e'
   127  007EB9  64                 	db	100	;'d'
   128  007EBA  2E                 	db	46
   129  007EBB  2E                 	db	46
   130  007EBC  2E                 	db	46
   131  007EBD  0D                 	db	13
   132  007EBE  0A                 	db	10
   133  007EBF  00                 	db	0
   134  007EC0                     STR_8:
   135  007EC0  53                 	db	83	;'S'
   136  007EC1  65                 	db	101	;'e'
   137  007EC2  6E                 	db	110	;'n'
   138  007EC3  64                 	db	100	;'d'
   139  007EC4  69                 	db	105	;'i'
   140  007EC5  6E                 	db	110	;'n'
   141  007EC6  67                 	db	103	;'g'
   142  007EC7  20                 	db	32
   143  007EC8  43                 	db	67	;'C'
   144  007EC9  6F                 	db	111	;'o'
   145  007ECA  6D                 	db	109	;'m'
   146  007ECB  6D                 	db	109	;'m'
   147  007ECC  61                 	db	97	;'a'
   148  007ECD  6E                 	db	110	;'n'
   149  007ECE  64                 	db	100	;'d'
   150  007ECF  20                 	db	32
   151  007ED0  31                 	db	49	;'1'
   152  007ED1  20                 	db	32
   153  007ED2  46                 	db	70	;'F'
   154  007ED3  61                 	db	97	;'a'
   155  007ED4  69                 	db	105	;'i'
   156  007ED5  6C                 	db	108	;'l'
   157  007ED6  65                 	db	101	;'e'
   158  007ED7  64                 	db	100	;'d'
   159  007ED8  2E                 	db	46
   160  007ED9  2E                 	db	46
   161  007EDA  2E                 	db	46
   162  007EDB  0D                 	db	13
   163  007EDC  0A                 	db	10
   164  007EDD  00                 	db	0
   165  007EDE                     STR_1:
   166  007EDE  55                 	db	85	;'U'
   167  007EDF  53                 	db	83	;'S'
   168  007EE0  41                 	db	65	;'A'
   169  007EE1  52                 	db	82	;'R'
   170  007EE2  54                 	db	84	;'T'
   171  007EE3  20                 	db	32
   172  007EE4  4D                 	db	77	;'M'
   173  007EE5  6F                 	db	111	;'o'
   174  007EE6  64                 	db	100	;'d'
   175  007EE7  75                 	db	117	;'u'
   176  007EE8  6C                 	db	108	;'l'
   177  007EE9  65                 	db	101	;'e'
   178  007EEA  20                 	db	32
   179  007EEB  49                 	db	73	;'I'
   180  007EEC  6E                 	db	110	;'n'
   181  007EED  69                 	db	105	;'i'
   182  007EEE  74                 	db	116	;'t'
   183  007EEF  69                 	db	105	;'i'
   184  007EF0  61                 	db	97	;'a'
   185  007EF1  6C                 	db	108	;'l'
   186  007EF2  69                 	db	105	;'i'
   187  007EF3  7A                 	db	122	;'z'
   188  007EF4  65                 	db	101	;'e'
   189  007EF5  64                 	db	100	;'d'
   190  007EF6  2E                 	db	46
   191  007EF7  2E                 	db	46
   192  007EF8  2E                 	db	46
   193  007EF9  0D                 	db	13
   194  007EFA  0A                 	db	10
   195  007EFB  00                 	db	0
   196  007EFC                     STR_3:
   197  007EFC  53                 	db	83	;'S'
   198  007EFD  65                 	db	101	;'e'
   199  007EFE  6E                 	db	110	;'n'
   200  007EFF  64                 	db	100	;'d'
   201  007F00  69                 	db	105	;'i'
   202  007F01  6E                 	db	110	;'n'
   203  007F02  67                 	db	103	;'g'
   204  007F03  20                 	db	32
   205  007F04  44                 	db	68	;'D'
   206  007F05  75                 	db	117	;'u'
   207  007F06  6D                 	db	109	;'m'
   208  007F07  6D                 	db	109	;'m'
   209  007F08  79                 	db	121	;'y'
   210  007F09  20                 	db	32
   211  007F0A  43                 	db	67	;'C'
   212  007F0B  6C                 	db	108	;'l'
   213  007F0C  6F                 	db	111	;'o'
   214  007F0D  63                 	db	99	;'c'
   215  007F0E  6B                 	db	107	;'k'
   216  007F0F  73                 	db	115	;'s'
   217  007F10  2E                 	db	46
   218  007F11  2E                 	db	46
   219  007F12  0D                 	db	13
   220  007F13  0A                 	db	10
   221  007F14  00                 	db	0
   222  007F15                     STR_12:
   223  007F15  43                 	db	67	;'C'
   224  007F16  6F                 	db	111	;'o'
   225  007F17  6D                 	db	109	;'m'
   226  007F18  6D                 	db	109	;'m'
   227  007F19  61                 	db	97	;'a'
   228  007F1A  6E                 	db	110	;'n'
   229  007F1B  64                 	db	100	;'d'
   230  007F1C  20                 	db	32
   231  007F1D  31                 	db	49	;'1'
   232  007F1E  36                 	db	54	;'6'
   233  007F1F  20                 	db	32
   234  007F20  53                 	db	83	;'S'
   235  007F21  75                 	db	117	;'u'
   236  007F22  63                 	db	99	;'c'
   237  007F23  63                 	db	99	;'c'
   238  007F24  65                 	db	101	;'e'
   239  007F25  73                 	db	115	;'s'
   240  007F26  73                 	db	115	;'s'
   241  007F27  2E                 	db	46
   242  007F28  2E                 	db	46
   243  007F29  0D                 	db	13
   244  007F2A  0A                 	db	10
   245  007F2B  00                 	db	0
   246  007F2C                     STR_6:
   247  007F2C  43                 	db	67	;'C'
   248  007F2D  6F                 	db	111	;'o'
   249  007F2E  6D                 	db	109	;'m'
   250  007F2F  6D                 	db	109	;'m'
   251  007F30  61                 	db	97	;'a'
   252  007F31  6E                 	db	110	;'n'
   253  007F32  64                 	db	100	;'d'
   254  007F33  20                 	db	32
   255  007F34  30                 	db	48	;'0'
   256  007F35  20                 	db	32
   257  007F36  53                 	db	83	;'S'
   258  007F37  75                 	db	117	;'u'
   259  007F38  63                 	db	99	;'c'
   260  007F39  63                 	db	99	;'c'
   261  007F3A  65                 	db	101	;'e'
   262  007F3B  73                 	db	115	;'s'
   263  007F3C  73                 	db	115	;'s'
   264  007F3D  2E                 	db	46
   265  007F3E  2E                 	db	46
   266  007F3F  0D                 	db	13
   267  007F40  0A                 	db	10
   268  007F41  00                 	db	0
   269  007F42                     STR_9:
   270  007F42  43                 	db	67	;'C'
   271  007F43  6F                 	db	111	;'o'
   272  007F44  6D                 	db	109	;'m'
   273  007F45  6D                 	db	109	;'m'
   274  007F46  61                 	db	97	;'a'
   275  007F47  6E                 	db	110	;'n'
   276  007F48  64                 	db	100	;'d'
   277  007F49  20                 	db	32
   278  007F4A  31                 	db	49	;'1'
   279  007F4B  20                 	db	32
   280  007F4C  53                 	db	83	;'S'
   281  007F4D  75                 	db	117	;'u'
   282  007F4E  63                 	db	99	;'c'
   283  007F4F  63                 	db	99	;'c'
   284  007F50  65                 	db	101	;'e'
   285  007F51  73                 	db	115	;'s'
   286  007F52  73                 	db	115	;'s'
   287  007F53  2E                 	db	46
   288  007F54  2E                 	db	46
   289  007F55  0D                 	db	13
   290  007F56  0A                 	db	10
   291  007F57  00                 	db	0
   292  007F58                     STR_16:
   293  007F58  52                 	db	82	;'R'
   294  007F59  65                 	db	101	;'e'
   295  007F5A  61                 	db	97	;'a'
   296  007F5B  64                 	db	100	;'d'
   297  007F5C  69                 	db	105	;'i'
   298  007F5D  6E                 	db	110	;'n'
   299  007F5E  67                 	db	103	;'g'
   300  007F5F  20                 	db	32
   301  007F60  73                 	db	115	;'s'
   302  007F61  65                 	db	101	;'e'
   303  007F62  63                 	db	99	;'c'
   304  007F63  74                 	db	116	;'t'
   305  007F64  6F                 	db	111	;'o'
   306  007F65  72                 	db	114	;'r'
   307  007F66  20                 	db	32
   308  007F67  25                 	db	37
   309  007F68  75                 	db	117	;'u'
   310  007F69  0D                 	db	13
   311  007F6A  0A                 	db	10
   312  007F6B  00                 	db	0
   313  007F6C                     STR_13:
   314  007F6C  54                 	db	84	;'T'
   315  007F6D  69                 	db	105	;'i'
   316  007F6E  6D                 	db	109	;'m'
   317  007F6F  65                 	db	101	;'e'
   318  007F70  6F                 	db	111	;'o'
   319  007F71  75                 	db	117	;'u'
   320  007F72  74                 	db	116	;'t'
   321  007F73  20                 	db	32
   322  007F74  45                 	db	69	;'E'
   323  007F75  72                 	db	114	;'r'
   324  007F76  72                 	db	114	;'r'
   325  007F77  6F                 	db	111	;'o'
   326  007F78  72                 	db	114	;'r'
   327  007F79  2E                 	db	46
   328  007F7A  2E                 	db	46
   329  007F7B  2E                 	db	46
   330  007F7C  0D                 	db	13
   331  007F7D  0A                 	db	10
   332  007F7E  00                 	db	0
   333  007F7F                     STR_2:
   334  007F7F  44                 	db	68	;'D'
   335  007F80  69                 	db	105	;'i'
   336  007F81  73                 	db	115	;'s'
   337  007F82  6B                 	db	107	;'k'
   338  007F83  20                 	db	32
   339  007F84  49                 	db	73	;'I'
   340  007F85  6E                 	db	110	;'n'
   341  007F86  69                 	db	105	;'i'
   342  007F87  74                 	db	116	;'t'
   343  007F88  69                 	db	105	;'i'
   344  007F89  61                 	db	97	;'a'
   345  007F8A  6C                 	db	108	;'l'
   346  007F8B  69                 	db	105	;'i'
   347  007F8C  7A                 	db	122	;'z'
   348  007F8D  65                 	db	101	;'e'
   349  007F8E  64                 	db	100	;'d'
   350  007F8F  0D                 	db	13
   351  007F90  0A                 	db	10
   352  007F91  00                 	db	0
   353  007F92                     STR_10:
   354  007F92  53                 	db	83	;'S'
   355  007F93  65                 	db	101	;'e'
   356  007F94  6E                 	db	110	;'n'
   357  007F95  64                 	db	100	;'d'
   358  007F96  69                 	db	105	;'i'
   359  007F97  6E                 	db	110	;'n'
   360  007F98  67                 	db	103	;'g'
   361  007F99  20                 	db	32
   362  007F9A  43                 	db	67	;'C'
   363  007F9B  4D                 	db	77	;'M'
   364  007F9C  44                 	db	68	;'D'
   365  007F9D  31                 	db	49	;'1'
   366  007F9E  36                 	db	54	;'6'
   367  007F9F  2E                 	db	46
   368  007FA0  2E                 	db	46
   369  007FA1  0D                 	db	13
   370  007FA2  0A                 	db	10
   371  007FA3  00                 	db	0
   372  007FA4                     STR_17:
   373  007FA4  53                 	db	83	;'S'
   374  007FA5  65                 	db	101	;'e'
   375  007FA6  6E                 	db	110	;'n'
   376  007FA7  64                 	db	100	;'d'
   377  007FA8  69                 	db	105	;'i'
   378  007FA9  6E                 	db	110	;'n'
   379  007FAA  67                 	db	103	;'g'
   380  007FAB  20                 	db	32
   381  007FAC  43                 	db	67	;'C'
   382  007FAD  4D                 	db	77	;'M'
   383  007FAE  44                 	db	68	;'D'
   384  007FAF  31                 	db	49	;'1'
   385  007FB0  37                 	db	55	;'7'
   386  007FB1  2E                 	db	46
   387  007FB2  2E                 	db	46
   388  007FB3  0D                 	db	13
   389  007FB4  0A                 	db	10
   390  007FB5  00                 	db	0
   391  007FB6                     STR_20:
   392  007FB6  30                 	db	48	;'0'
   393  007FB7  31                 	db	49	;'1'
   394  007FB8  32                 	db	50	;'2'
   395  007FB9  33                 	db	51	;'3'
   396  007FBA  34                 	db	52	;'4'
   397  007FBB  35                 	db	53	;'5'
   398  007FBC  36                 	db	54	;'6'
   399  007FBD  37                 	db	55	;'7'
   400  007FBE  38                 	db	56	;'8'
   401  007FBF  39                 	db	57	;'9'
   402  007FC0  61                 	db	97	;'a'
   403  007FC1  62                 	db	98	;'b'
   404  007FC2  63                 	db	99	;'c'
   405  007FC3  64                 	db	100	;'d'
   406  007FC4  65                 	db	101	;'e'
   407  007FC5  66                 	db	102	;'f'
   408  007FC6  00                 	db	0
   409  007FC7                     STR_4:
   410  007FC7  53                 	db	83	;'S'
   411  007FC8  65                 	db	101	;'e'
   412  007FC9  6E                 	db	110	;'n'
   413  007FCA  64                 	db	100	;'d'
   414  007FCB  69                 	db	105	;'i'
   415  007FCC  6E                 	db	110	;'n'
   416  007FCD  67                 	db	103	;'g'
   417  007FCE  20                 	db	32
   418  007FCF  43                 	db	67	;'C'
   419  007FD0  4D                 	db	77	;'M'
   420  007FD1  44                 	db	68	;'D'
   421  007FD2  30                 	db	48	;'0'
   422  007FD3  2E                 	db	46
   423  007FD4  2E                 	db	46
   424  007FD5  0D                 	db	13
   425  007FD6  0A                 	db	10
   426  007FD7  00                 	db	0
   427  007FD8                     STR_7:
   428  007FD8  53                 	db	83	;'S'
   429  007FD9  65                 	db	101	;'e'
   430  007FDA  6E                 	db	110	;'n'
   431  007FDB  64                 	db	100	;'d'
   432  007FDC  69                 	db	105	;'i'
   433  007FDD  6E                 	db	110	;'n'
   434  007FDE  67                 	db	103	;'g'
   435  007FDF  20                 	db	32
   436  007FE0  43                 	db	67	;'C'
   437  007FE1  4D                 	db	77	;'M'
   438  007FE2  44                 	db	68	;'D'
   439  007FE3  31                 	db	49	;'1'
   440  007FE4  2E                 	db	46
   441  007FE5  2E                 	db	46
   442  007FE6  0D                 	db	13
   443  007FE7  0A                 	db	10
   444  007FE8  00                 	db	0
   445  007FE9                     STR_15:
   446  007FE9  52                 	db	82	;'R'
   447  007FEA  31                 	db	49	;'1'
   448  007FEB  20                 	db	32
   449  007FEC  3D                 	db	61	;'='
   450  007FED  20                 	db	32
   451  007FEE  30                 	db	48	;'0'
   452  007FEF  78                 	db	120	;'x'
   453  007FF0  25                 	db	37
   454  007FF1  30                 	db	48	;'0'
   455  007FF2  32                 	db	50	;'2'
   456  007FF3  78                 	db	120	;'x'
   457  007FF4  0D                 	db	13
   458  007FF5  0A                 	db	10
   459  007FF6  00                 	db	0
   460  007FF7                     STR_18:
   461  007FF7  30                 	db	48	;'0'
   462  007FF8  78                 	db	120	;'x'
   463  007FF9  25                 	db	37
   464  007FFA  30                 	db	48	;'0'
   465  007FFB  32                 	db	50	;'2'
   466  007FFC  78                 	db	120	;'x'
   467  007FFD  20                 	db	32
   468  007FFE  00                 	db	0
   469  007FFF                     __end_of__stringdata:
   470                           	opt stack 0
   471                           
   472                           ; #config settings
   473  007FFF  00                 	db	0	; dummy byte at the end
   474  0000                     
   475                           	psect	cinit
   476  007728                     __pcinit:
   477                           	opt stack 0
   478  007728                     start_initialization:
   479                           	opt stack 0
   480  007728                     __initialization:
   481                           	opt stack 0
   482                           
   483                           ; Clear objects allocated to BIGRAM (1024 bytes)
   484  007728  EE04  F000         	lfsr	0,__pbssBIGRAM
   485  00772C  EE14 F000          	lfsr	1,1024
   486  007730                     clear_0:
   487  007730  6AEE               	clrf	postinc0,c
   488  007732  50E5               	movf	postdec1,w,c
   489  007734  50E1               	movf	fsr1l,w,c
   490  007736  E1FC               	bnz	clear_0
   491  007738  50E2               	movf	fsr1h,w,c
   492  00773A  E1FA               	bnz	clear_0
   493                           
   494                           ; Clear objects allocated to COMRAM (1 bytes)
   495  00773C  6A39               	clrf	__pbssCOMRAM& (0+255),c
   496  00773E                     end_of_initialization:
   497                           	opt stack 0
   498  00773E                     __end_of__initialization:
   499                           	opt stack 0
   500  00773E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   501  007740  6EF8               	movwf	tblptru,c
   502  007742  0100               	movlb	0
   503  007744  EFD8  F03B         	goto	_main	;jump to C main() function
   504                           tblptru	equ	0xFF8
   505                           postinc0	equ	0xFEE
   506                           postdec1	equ	0xFE5
   507                           fsr1h	equ	0xFE2
   508                           fsr1l	equ	0xFE1
   509                           
   510                           	psect	bssCOMRAM
   511  000039                     __pbssCOMRAM:
   512                           	opt stack 0
   513  000039                     _USART1_Status:
   514                           	opt stack 0
   515  000039                     	ds	1
   516                           tblptru	equ	0xFF8
   517                           postinc0	equ	0xFEE
   518                           postdec1	equ	0xFE5
   519                           fsr1h	equ	0xFE2
   520                           fsr1l	equ	0xFE1
   521                           
   522                           	psect	bssBIGRAM
   523  000400                     __pbssBIGRAM:
   524                           	opt stack 0
   525  000400                     _secdata:
   526                           	opt stack 0
   527  000400                     	ds	512
   528  000600                     diskio@secdata:
   529                           	opt stack 0
   530  000600                     	ds	512
   531                           tblptru	equ	0xFF8
   532                           postinc0	equ	0xFEE
   533                           postdec1	equ	0xFE5
   534                           fsr1h	equ	0xFE2
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	cstackCOMRAM
   538  000001                     __pcstackCOMRAM:
   539                           	opt stack 0
   540  000001                     ??_isdigit:
   541  000001                     ?___wmul:
   542                           	opt stack 0
   543  000001                     ?___lwdiv:
   544                           	opt stack 0
   545  000001                     SPI_MC_Write@TempVar:
   546                           	opt stack 0
   547  000001                     Write1USART@data:
   548                           	opt stack 0
   549  000001                     Open1USART@spbrg:
   550                           	opt stack 0
   551  000001                     ___wmul@multiplier:
   552                           	opt stack 0
   553  000001                     ___lwdiv@dividend:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x0
   557  000001                     	ds	1
   558  000002                     putch@data:
   559                           	opt stack 0
   560  000002                     SPI_MC_Write@data_out:
   561                           	opt stack 0
   562  000002                     _isdigit$1326:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x1
   566  000002                     	ds	1
   567  000003                     ??_Open1USART:
   568  000003                     isdigit@c:
   569                           	opt stack 0
   570  000003                     ___wmul@multiplicand:
   571                           	opt stack 0
   572  000003                     ___lwdiv@divisor:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x2
   576  000003                     	ds	2
   577  000005                     ___wmul@product:
   578                           	opt stack 0
   579  000005                     ___lwdiv@quotient:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x4
   583  000005                     	ds	1
   584  000006                     Open1USART@config:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x5
   588  000006                     	ds	1
   589  000007                     configUSART@config:
   590                           	opt stack 0
   591  000007                     ___lwdiv@counter:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x6
   595  000007                     	ds	1
   596  000008                     ?___lwmod:
   597                           	opt stack 0
   598  000008                     configUSART@spbrg:
   599                           	opt stack 0
   600  000008                     ___lwmod@dividend:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x7
   604  000008                     	ds	2
   605  00000A                     ___lwmod@divisor:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x9
   609  00000A                     	ds	2
   610  00000C                     ___lwmod@counter:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0xB
   614  00000C                     	ds	1
   615  00000D                     ?_printf:
   616                           	opt stack 0
   617  00000D                     printf@f:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0xC
   621  00000D                     	ds	6
   622  000013                     ??_printf:
   623                           
   624                           ; 0 bytes @ 0x12
   625  000013                     	ds	4
   626  000017                     printf@ap:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x16
   630  000017                     	ds	2
   631  000019                     printf@idx:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x18
   635  000019                     	ds	1
   636  00001A                     printf@prec:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x19
   640  00001A                     	ds	1
   641  00001B                     printf@_val:
   642                           	opt stack 0
   643                           
   644                           ; 5 bytes @ 0x1A
   645  00001B                     	ds	5
   646  000020                     printf@flag:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x1F
   650  000020                     	ds	1
   651  000021                     printf@width:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x20
   655  000021                     	ds	2
   656  000023                     printf@c:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x22
   660  000023                     	ds	1
   661  000024                     ??_disk_readsectordata:
   662  000024                     SPI_send_cmd@arg:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x23
   666  000024                     	ds	1
   667  000025                     disk_readsectordata@res:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x24
   671  000025                     	ds	1
   672  000026                     disk_readsectordata@x:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x25
   676  000026                     	ds	2
   677  000028                     ??_SPI_send_cmd:
   678  000028                     disk_readsectordata@x_303:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x27
   682  000028                     	ds	1
   683  000029                     SPI_send_cmd@cmd:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x28
   687  000029                     	ds	1
   688  00002A                     SPI_send_cmd@retry:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x29
   692  00002A                     	ds	1
   693  00002B                     SPI_send_cmd@res:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x2A
   697  00002B                     	ds	1
   698  00002C                     ??_SD_Init:
   699  00002C                     disk_readsector@sec:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x2B
   703  00002C                     	ds	1
   704  00002D                     SD_Init@Count:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x2C
   708  00002D                     	ds	2
   709  00002F                     
   710                           ; 0 bytes @ 0x2E
   711  00002F                     	ds	1
   712  000030                     ??_disk_readsector:
   713                           
   714                           ; 0 bytes @ 0x2F
   715  000030                     	ds	4
   716  000034                     disk_readsector@res:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x33
   720  000034                     	ds	1
   721  000035                     main@sec:
   722                           	opt stack 0
   723                           
   724                           ; 4 bytes @ 0x34
   725  000035                     	ds	4
   726                           tblptru	equ	0xFF8
   727                           postinc0	equ	0xFEE
   728                           postdec1	equ	0xFE5
   729                           fsr1h	equ	0xFE2
   730                           fsr1l	equ	0xFE1
   731                           
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 116 in file "PICSD.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  sec             4   52[COMRAM] unsigned long 
   742 ;; Return value:  Size  Location     Type
   743 ;;		None               void
   744 ;; Registers used:
   745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   751 ;;      Params:         0       0       0       0       0       0       0       0       0
   752 ;;      Locals:         4       0       0       0       0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0       0       0
   754 ;;      Totals:         4       0       0       0       0       0       0       0       0
   755 ;;Total ram usage:        4 bytes
   756 ;; Hardware stack levels required when called:    6
   757 ;; This function calls:
   758 ;;		_configOscillator
   759 ;;		_configUSART
   760 ;;		_disk_initialize
   761 ;;		_disk_readsector
   762 ;;		_printf
   763 ;; This function is called by:
   764 ;;		Startup code after reset
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text0
   769  0077B0                     __ptext0:
   770                           	opt stack 0
   771  0077B0                     _main:
   772                           	opt stack 25
   773                           
   774                           ;PICSD.c: 118: DWORD sec = 0;
   775                           
   776                           ;incstack = 0
   777  0077B0  0E00               	movlw	0
   778  0077B2  6E35               	movwf	main@sec,c
   779  0077B4  0E00               	movlw	0
   780  0077B6  6E36               	movwf	main@sec+1,c
   781  0077B8  0E00               	movlw	0
   782  0077BA  6E37               	movwf	main@sec+2,c
   783  0077BC  0E00               	movlw	0
   784  0077BE  6E38               	movwf	main@sec+3,c
   785                           
   786                           ;PICSD.c: 119: configOscillator();
   787  0077C0  EC3D  F03B         	call	_configOscillator	;wreg free
   788                           
   789                           ;PICSD.c: 120: configUSART();
   790  0077C4  EC50  F03B         	call	_configUSART	;wreg free
   791                           
   792                           ;PICSD.c: 121: printf("USART Module Initialized...\r\n");
   793  0077C8  0E7E               	movlw	high STR_1
   794  0077CA  6E0E               	movwf	printf@f+1,c
   795  0077CC  0EDE               	movlw	low STR_1
   796  0077CE  6E0D               	movwf	printf@f,c
   797  0077D0  ECE1  F03D         	call	_printf	;wreg free
   798                           
   799                           ;PICSD.c: 122: disk_initialize();
   800  0077D4  EC5B  F03B         	call	_disk_initialize	;wreg free
   801  0077D8                     l1578:
   802                           
   803                           ;PICSD.c: 124: disk_readsector(sec++);
   804  0077D8  C035  F02C         	movff	main@sec,disk_readsector@sec
   805  0077DC  C036  F02D         	movff	main@sec+1,disk_readsector@sec+1
   806  0077E0  C037  F02E         	movff	main@sec+2,disk_readsector@sec+2
   807  0077E4  C038  F02F         	movff	main@sec+3,disk_readsector@sec+3
   808  0077E8  EC52  F03C         	call	_disk_readsector	;wreg free
   809  0077EC  0E01               	movlw	1
   810  0077EE  2635               	addwf	main@sec,f,c
   811  0077F0  0E00               	movlw	0
   812  0077F2  2236               	addwfc	main@sec+1,f,c
   813  0077F4  2237               	addwfc	main@sec+2,f,c
   814  0077F6  2238               	addwfc	main@sec+3,f,c
   815  0077F8  D7EF               	goto	l1578
   816  0077FA                     __end_of_main:
   817                           	opt stack 0
   818                           tblptru	equ	0xFF8
   819                           postinc0	equ	0xFEE
   820                           postdec1	equ	0xFE5
   821                           fsr1h	equ	0xFE2
   822                           fsr1l	equ	0xFE1
   823                           
   824 ;; *************** function _disk_readsector *****************
   825 ;; Defined at:
   826 ;;		line 217 in file "diskio.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  sec             4   43[COMRAM] unsigned long 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  res             1   51[COMRAM] unsigned char 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      unsigned char 
   833 ;; Registers used:
   834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   840 ;;      Params:         4       0       0       0       0       0       0       0       0
   841 ;;      Locals:         1       0       0       0       0       0       0       0       0
   842 ;;      Temps:          4       0       0       0       0       0       0       0       0
   843 ;;      Totals:         9       0       0       0       0       0       0       0       0
   844 ;;Total ram usage:        9 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    4
   847 ;; This function calls:
   848 ;;		_SPI_send_cmd
   849 ;;		_disk_readsectordata
   850 ;;		_printf
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text1
   857  0078A4                     __ptext1:
   858                           	opt stack 0
   859  0078A4                     _disk_readsector:
   860                           	opt stack 26
   861                           
   862                           ;diskio.c: 219: BYTE res;
   863                           ;diskio.c: 221: printf("Reading sector %u\r\n",sec);
   864                           
   865                           ;incstack = 0
   866  0078A4  0E7F               	movlw	high STR_16
   867  0078A6  6E0E               	movwf	printf@f+1,c
   868  0078A8  0E58               	movlw	low STR_16
   869  0078AA  6E0D               	movwf	printf@f,c
   870  0078AC  C02C  F00F         	movff	disk_readsector@sec,?_printf+2
   871  0078B0  C02D  F010         	movff	disk_readsector@sec+1,?_printf+3
   872  0078B4  C02E  F011         	movff	disk_readsector@sec+2,?_printf+4
   873  0078B8  C02F  F012         	movff	disk_readsector@sec+3,?_printf+5
   874  0078BC  ECE1  F03D         	call	_printf	;wreg free
   875                           
   876                           ;diskio.c: 223: printf("Sending CMD17..\r\n");
   877  0078C0  0E7F               	movlw	high STR_17
   878  0078C2  6E0E               	movwf	printf@f+1,c
   879  0078C4  0EA4               	movlw	low STR_17
   880  0078C6  6E0D               	movwf	printf@f,c
   881  0078C8  ECE1  F03D         	call	_printf	;wreg free
   882                           
   883                           ;diskio.c: 225: res = SPI_send_cmd ((0x40+17),sec<<9);
   884  0078CC  C02C  F030         	movff	disk_readsector@sec,??_disk_readsector
   885  0078D0  C02D  F031         	movff	disk_readsector@sec+1,??_disk_readsector+1
   886  0078D4  C02E  F032         	movff	disk_readsector@sec+2,??_disk_readsector+2
   887  0078D8  C02F  F033         	movff	disk_readsector@sec+3,??_disk_readsector+3
   888  0078DC  0E09               	movlw	9
   889  0078DE                     u965:
   890  0078DE  90D8               	bcf	status,0,c
   891  0078E0  3630               	rlcf	??_disk_readsector,f,c
   892  0078E2  3631               	rlcf	??_disk_readsector+1,f,c
   893  0078E4  3632               	rlcf	??_disk_readsector+2,f,c
   894  0078E6  3633               	rlcf	??_disk_readsector+3,f,c
   895  0078E8  2EE8               	decfsz	wreg,f,c
   896  0078EA  D7F9               	goto	u965
   897  0078EC  C030  F024         	movff	??_disk_readsector,SPI_send_cmd@arg
   898  0078F0  C031  F025         	movff	??_disk_readsector+1,SPI_send_cmd@arg+1
   899  0078F4  C032  F026         	movff	??_disk_readsector+2,SPI_send_cmd@arg+2
   900  0078F8  C033  F027         	movff	??_disk_readsector+3,SPI_send_cmd@arg+3
   901  0078FC  0E51               	movlw	81
   902  0078FE  ECDA  F03C         	call	_SPI_send_cmd
   903  007902  6E34               	movwf	disk_readsector@res,c
   904                           
   905                           ;diskio.c: 227: if(res != 0x00)
   906  007904  5034               	movf	disk_readsector@res,w,c
   907  007906  A4D8               	btfss	status,2,c
   908  007908  0012               	return	
   909                           
   910                           ;diskio.c: 230: res = disk_readsectordata();
   911                           
   912                           ;diskio.c: 228: return 1;
   913                           ;	Return value of _disk_readsector is never used
   914  00790A  EC89  F03C         	call	_disk_readsectordata	;wreg free
   915  00790E  6E34               	movwf	disk_readsector@res,c
   916  007910  0012               	return	
   917  007912                     __end_of_disk_readsector:
   918                           	opt stack 0
   919                           tblptru	equ	0xFF8
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           postdec1	equ	0xFE5
   923                           fsr1h	equ	0xFE2
   924                           fsr1l	equ	0xFE1
   925                           status	equ	0xFD8
   926                           
   927 ;; *************** function _disk_readsectordata *****************
   928 ;; Defined at:
   929 ;;		line 252 in file "diskio.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  x               2   39[COMRAM] int 
   934 ;;  x               2   37[COMRAM] int 
   935 ;;  res             1   36[COMRAM] unsigned char 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      unsigned char 
   938 ;; Registers used:
   939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         0       0       0       0       0       0       0       0       0
   946 ;;      Locals:         5       0       0       0       0       0       0       0       0
   947 ;;      Temps:          1       0       0       0       0       0       0       0       0
   948 ;;      Totals:         6       0       0       0       0       0       0       0       0
   949 ;;Total ram usage:        6 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    3
   952 ;; This function calls:
   953 ;;		_SPI_MC_Write
   954 ;;		_printf
   955 ;; This function is called by:
   956 ;;		_disk_readsector
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text2
   961  007912                     __ptext2:
   962                           	opt stack 0
   963  007912                     _disk_readsectordata:
   964                           	opt stack 26
   965                           
   966                           ;diskio.c: 254: BYTE res;
   967                           ;diskio.c: 257: LATBbits.LATB2 = 0;
   968                           
   969                           ;incstack = 0
   970  007912  948A               	bcf	3978,2,c	;volatile
   971  007914                     l1512:
   972  007914  0EFF               	movlw	255
   973  007916  EC75  F03B         	call	_SPI_MC_Write
   974  00791A  6E25               	movwf	disk_readsectordata@res,c
   975  00791C  5025               	movf	disk_readsectordata@res& (0+255),w,c
   976  00791E  0AFE               	xorlw	254
   977  007920  A4D8               	btfss	status,2,c
   978  007922  D7F8               	goto	l1512
   979                           
   980                           ;diskio.c: 261: for(int x = 0; x < 512; x++)
   981  007924  0E00               	movlw	0
   982  007926  6E27               	movwf	disk_readsectordata@x+1,c
   983  007928  0E00               	movlw	0
   984  00792A  6E26               	movwf	disk_readsectordata@x,c
   985  00792C  5027               	movf	disk_readsectordata@x+1,w,c
   986  00792E  0A80               	xorlw	128
   987  007930  0F7E               	addlw	-130
   988  007932  0E00               	movlw	0
   989  007934  B4D8               	btfsc	status,2,c
   990  007936  5C26               	subwf	disk_readsectordata@x,w,c
   991  007938  B0D8               	btfsc	status,0,c
   992  00793A  D00D               	goto	l1526
   993                           
   994                           ;diskio.c: 262: {
   995                           ;diskio.c: 263: secdata[x] = SPI_MC_Write(0xff);
   996  00793C  0E00               	movlw	low diskio@secdata
   997  00793E  2426               	addwf	disk_readsectordata@x,w,c
   998  007940  6ED9               	movwf	fsr2l,c
   999  007942  0E06               	movlw	high diskio@secdata
  1000  007944  2027               	addwfc	disk_readsectordata@x+1,w,c
  1001  007946  6EDA               	movwf	fsr2h,c
  1002  007948  0EFF               	movlw	255
  1003  00794A  EC75  F03B         	call	_SPI_MC_Write
  1004  00794E  6EDF               	movwf	indf2,c
  1005  007950  4A26               	infsnz	disk_readsectordata@x,f,c
  1006  007952  2A27               	incf	disk_readsectordata@x+1,f,c
  1007  007954  D7EB               	goto	L1
  1008  007956                     l1526:
  1009                           
  1010                           ;diskio.c: 264: }
  1011                           ;diskio.c: 267: SPI_MC_Write(0xff);
  1012  007956  0EFF               	movlw	255
  1013  007958  EC75  F03B         	call	_SPI_MC_Write
  1014                           
  1015                           ;diskio.c: 268: SPI_MC_Write(0xff);
  1016  00795C  0EFF               	movlw	255
  1017  00795E  EC75  F03B         	call	_SPI_MC_Write
  1018                           
  1019                           ;diskio.c: 271: LATBbits.LATB2 = 1;
  1020  007962  848A               	bsf	3978,2,c	;volatile
  1021                           
  1022                           ;diskio.c: 273: for(int x = 0; x < 512; x++)
  1023  007964  0E00               	movlw	0
  1024  007966  6E29               	movwf	disk_readsectordata@x_303+1,c
  1025  007968  0E00               	movlw	0
  1026  00796A  6E28               	movwf	disk_readsectordata@x_303,c
  1027  00796C  5029               	movf	disk_readsectordata@x_303+1,w,c
  1028  00796E  0A80               	xorlw	128
  1029  007970  0F7E               	addlw	-130
  1030  007972  0E00               	movlw	0
  1031  007974  B4D8               	btfsc	status,2,c
  1032  007976  5C28               	subwf	disk_readsectordata@x_303,w,c
  1033  007978  B0D8               	btfsc	status,0,c
  1034  00797A  D014               	goto	l1542
  1035                           
  1036                           ;diskio.c: 274: {
  1037                           ;diskio.c: 275: printf("0x%02x ",secdata[x]);
  1038  00797C  0E7F               	movlw	high STR_18
  1039  00797E  6E0E               	movwf	printf@f+1,c
  1040  007980  0EF7               	movlw	low STR_18
  1041  007982  6E0D               	movwf	printf@f,c
  1042  007984  0E00               	movlw	low diskio@secdata
  1043  007986  2428               	addwf	disk_readsectordata@x_303,w,c
  1044  007988  6ED9               	movwf	fsr2l,c
  1045  00798A  0E06               	movlw	high diskio@secdata
  1046  00798C  2029               	addwfc	disk_readsectordata@x_303+1,w,c
  1047  00798E  6EDA               	movwf	fsr2h,c
  1048  007990  50DF               	movf	indf2,w,c
  1049  007992  6E24               	movwf	??_disk_readsectordata& (0+255),c
  1050  007994  5024               	movf	??_disk_readsectordata,w,c
  1051  007996  6E0F               	movwf	?_printf+2,c
  1052  007998  6A10               	clrf	?_printf+3,c
  1053  00799A  ECE1  F03D         	call	_printf	;wreg free
  1054  00799E  4A28               	infsnz	disk_readsectordata@x_303,f,c
  1055  0079A0  2A29               	incf	disk_readsectordata@x_303+1,f,c
  1056  0079A2  D7E4               	goto	L2
  1057  0079A4                     l1542:
  1058                           
  1059                           ;diskio.c: 276: }
  1060                           ;diskio.c: 278: printf("\r\n");
  1061  0079A4  0E7E               	movlw	high (STR_5+27)
  1062  0079A6  6E0E               	movwf	printf@f+1,c
  1063  0079A8  0EBD               	movlw	low (STR_5+27)
  1064  0079AA  6E0D               	movwf	printf@f,c
  1065  0079AC  ECE1  F03D         	call	_printf	;wreg free
  1066                           
  1067                           ;diskio.c: 280: return 0;
  1068  0079B0  0E00               	movlw	0
  1069  0079B2  0012               	return	
  1070  0079B4                     __end_of_disk_readsectordata:
  1071                           	opt stack 0
  1072                           tblptru	equ	0xFF8
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postdec1	equ	0xFE5
  1076                           fsr1h	equ	0xFE2
  1077                           fsr1l	equ	0xFE1
  1078                           indf2	equ	0xFDF
  1079                           fsr2h	equ	0xFDA
  1080                           fsr2l	equ	0xFD9
  1081                           status	equ	0xFD8
  1082                           
  1083 ;; *************** function _disk_initialize *****************
  1084 ;; Defined at:
  1085 ;;		line 50 in file "diskio.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;		None
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;		None
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      unsigned char 
  1092 ;; Registers used:
  1093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1099 ;;      Params:         0       0       0       0       0       0       0       0       0
  1100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1102 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1103 ;;Total ram usage:        0 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    5
  1106 ;; This function calls:
  1107 ;;		_SD_Init
  1108 ;;		_printf
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text3
  1115  0076B6                     __ptext3:
  1116                           	opt stack 0
  1117  0076B6                     _disk_initialize:
  1118                           	opt stack 25
  1119                           
  1120                           ;diskio.c: 52: if( SD_Init() == 0 )
  1121                           
  1122                           ;incstack = 0
  1123  0076B6  EC32  F03D         	call	_SD_Init	;wreg free
  1124  0076BA  0900               	iorlw	0
  1125  0076BC  A4D8               	btfss	status,2,c
  1126  0076BE  0012               	return	
  1127                           
  1128                           ;diskio.c: 53: {
  1129                           ;diskio.c: 54: printf("Disk Initialized\r\n");
  1130  0076C0  0E7F               	movlw	high STR_2
  1131  0076C2  6E0E               	movwf	printf@f+1,c
  1132  0076C4  0E7F               	movlw	low STR_2
  1133  0076C6  6E0D               	movwf	printf@f,c
  1134  0076C8  ECE1  F03D         	call	_printf	;wreg free
  1135  0076CC  0012               	return	
  1136  0076CE                     __end_of_disk_initialize:
  1137                           	opt stack 0
  1138                           tblptru	equ	0xFF8
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           postdec1	equ	0xFE5
  1142                           fsr1h	equ	0xFE2
  1143                           fsr1l	equ	0xFE1
  1144                           indf2	equ	0xFDF
  1145                           fsr2h	equ	0xFDA
  1146                           fsr2l	equ	0xFD9
  1147                           status	equ	0xFD8
  1148                           
  1149 ;; *************** function _SD_Init *****************
  1150 ;; Defined at:
  1151 ;;		line 75 in file "diskio.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  Count           2   44[COMRAM] int 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      unsigned char 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1165 ;;      Params:         0       0       0       0       0       0       0       0       0
  1166 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1167 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1168 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1169 ;;Total ram usage:        3 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    4
  1172 ;; This function calls:
  1173 ;;		_SPI_MC_Close
  1174 ;;		_SPI_MC_Initialize
  1175 ;;		_SPI_MC_Write
  1176 ;;		_SPI_send_cmd
  1177 ;;		_printf
  1178 ;; This function is called by:
  1179 ;;		_disk_initialize
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text4
  1184  007A64                     __ptext4:
  1185                           	opt stack 0
  1186  007A64                     _SD_Init:
  1187                           	opt stack 25
  1188                           
  1189                           ;diskio.c: 77: int Count = 0;
  1190                           
  1191                           ;incstack = 0
  1192  007A64  0E00               	movlw	0
  1193  007A66  6E2E               	movwf	SD_Init@Count+1,c
  1194  007A68  0E00               	movlw	0
  1195  007A6A  6E2D               	movwf	SD_Init@Count,c
  1196                           
  1197                           ;diskio.c: 79: LATBbits.LATB2 = 0;
  1198  007A6C  948A               	bcf	3978,2,c	;volatile
  1199                           
  1200                           ;diskio.c: 81: SPI_MC_Close();
  1201  007A6E  EC3B  F03B         	call	_SPI_MC_Close	;wreg free
  1202                           
  1203                           ;diskio.c: 83: SPI_MC_Initialize();
  1204  007A72  EC67  F03B         	call	_SPI_MC_Initialize	;wreg free
  1205                           
  1206                           ;diskio.c: 85: LATBbits.LATB2 = 1;
  1207  007A76  848A               	bsf	3978,2,c	;volatile
  1208                           
  1209                           ;diskio.c: 87: printf("Sending Dummy Clocks..\r\n");
  1210  007A78  0E7E               	movlw	high STR_3
  1211  007A7A  6E0E               	movwf	printf@f+1,c
  1212  007A7C  0EFC               	movlw	low STR_3
  1213  007A7E  6E0D               	movwf	printf@f,c
  1214  007A80  ECE1  F03D         	call	_printf	;wreg free
  1215                           
  1216                           ;diskio.c: 89: for(Count=0;Count<10;Count++)
  1217  007A84  0E00               	movlw	0
  1218  007A86  6E2E               	movwf	SD_Init@Count+1,c
  1219  007A88  0E00               	movlw	0
  1220  007A8A  6E2D               	movwf	SD_Init@Count,c
  1221  007A8C  502E               	movf	SD_Init@Count+1,w,c
  1222  007A8E  0A80               	xorlw	128
  1223  007A90  0F80               	addlw	-128
  1224  007A92  0E0A               	movlw	10
  1225  007A94  B4D8               	btfsc	status,2,c
  1226  007A96  5C2D               	subwf	SD_Init@Count,w,c
  1227  007A98  B0D8               	btfsc	status,0,c
  1228  007A9A  D006               	goto	l1452
  1229                           
  1230                           ;diskio.c: 90: {
  1231                           ;diskio.c: 91: SPI_MC_Write( 0xff );
  1232  007A9C  0EFF               	movlw	255
  1233  007A9E  EC75  F03B         	call	_SPI_MC_Write
  1234  007AA2  4A2D               	infsnz	SD_Init@Count,f,c
  1235  007AA4  2A2E               	incf	SD_Init@Count+1,f,c
  1236  007AA6  D7F2               	goto	L3
  1237  007AA8                     l1452:
  1238                           
  1239                           ;diskio.c: 92: }
  1240                           ;diskio.c: 94: Count = 0;
  1241  007AA8  0E00               	movlw	0
  1242  007AAA  6E2E               	movwf	SD_Init@Count+1,c
  1243  007AAC  0E00               	movlw	0
  1244  007AAE  6E2D               	movwf	SD_Init@Count,c
  1245                           
  1246                           ;diskio.c: 95: printf("Sending CMD0..\r\n");
  1247  007AB0  0E7F               	movlw	high STR_4
  1248  007AB2  6E0E               	movwf	printf@f+1,c
  1249  007AB4  0EC7               	movlw	low STR_4
  1250  007AB6  6E0D               	movwf	printf@f,c
  1251  007AB8  ECE1  F03D         	call	_printf	;wreg free
  1252                           
  1253                           ;diskio.c: 97: while( SPI_send_cmd((0x40+0),0) != 0x01 )
  1254  007ABC  D00F               	goto	l1466
  1255  007ABE                     l1456:
  1256                           
  1257                           ;diskio.c: 98: {
  1258                           ;diskio.c: 99: Count++;
  1259  007ABE  4A2D               	infsnz	SD_Init@Count,f,c
  1260  007AC0  2A2E               	incf	SD_Init@Count+1,f,c
  1261                           
  1262                           ;diskio.c: 100: if(Count==10)
  1263  007AC2  502D               	movf	SD_Init@Count,w,c
  1264  007AC4  0A0A               	xorlw	10
  1265  007AC6  102E               	iorwf	SD_Init@Count+1,w,c
  1266  007AC8  A4D8               	btfss	status,2,c
  1267  007ACA  D008               	goto	l1466
  1268                           
  1269                           ;diskio.c: 101: {
  1270                           ;diskio.c: 102: printf("Sending Command 0 Failed...\r\n");
  1271  007ACC  0E7E               	movlw	high STR_5
  1272  007ACE  6E0E               	movwf	printf@f+1,c
  1273  007AD0  0EA2               	movlw	low STR_5
  1274  007AD2  6E0D               	movwf	printf@f,c
  1275  007AD4  ECE1  F03D         	call	_printf	;wreg free
  1276                           
  1277                           ;diskio.c: 103: return 1;
  1278  007AD8  0E01               	movlw	1
  1279  007ADA  0012               	return	
  1280  007ADC                     l1466:
  1281  007ADC  0E00               	movlw	0
  1282  007ADE  6E24               	movwf	SPI_send_cmd@arg,c
  1283  007AE0  0E00               	movlw	0
  1284  007AE2  6E25               	movwf	SPI_send_cmd@arg+1,c
  1285  007AE4  0E00               	movlw	0
  1286  007AE6  6E26               	movwf	SPI_send_cmd@arg+2,c
  1287  007AE8  0E00               	movlw	0
  1288  007AEA  6E27               	movwf	SPI_send_cmd@arg+3,c
  1289  007AEC  0E40               	movlw	64
  1290  007AEE  ECDA  F03C         	call	_SPI_send_cmd
  1291  007AF2  6E2C               	movwf	??_SD_Init& (0+255),c
  1292  007AF4  042C               	decf	??_SD_Init,w,c
  1293  007AF6  A4D8               	btfss	status,2,c
  1294  007AF8  D7E2               	goto	l1456
  1295                           
  1296                           ;diskio.c: 104: }
  1297                           ;diskio.c: 105: }
  1298                           ;diskio.c: 106: printf("Command 0 Success..\r\n");
  1299  007AFA  0E7F               	movlw	high STR_6
  1300  007AFC  6E0E               	movwf	printf@f+1,c
  1301  007AFE  0E2C               	movlw	low STR_6
  1302  007B00  6E0D               	movwf	printf@f,c
  1303  007B02  ECE1  F03D         	call	_printf	;wreg free
  1304                           
  1305                           ;diskio.c: 108: Count = 0;
  1306  007B06  0E00               	movlw	0
  1307  007B08  6E2E               	movwf	SD_Init@Count+1,c
  1308  007B0A  0E00               	movlw	0
  1309  007B0C  6E2D               	movwf	SD_Init@Count,c
  1310                           
  1311                           ;diskio.c: 109: printf("Sending CMD1..\r\n");
  1312  007B0E  0E7F               	movlw	high STR_7
  1313  007B10  6E0E               	movwf	printf@f+1,c
  1314  007B12  0ED8               	movlw	low STR_7
  1315  007B14  6E0D               	movwf	printf@f,c
  1316  007B16  ECE1  F03D         	call	_printf	;wreg free
  1317                           
  1318                           ;diskio.c: 110: while( SPI_send_cmd((0x40+1),0) != 0x00 )
  1319  007B1A  D00F               	goto	l1484
  1320  007B1C                     l1474:
  1321                           
  1322                           ;diskio.c: 111: {
  1323                           ;diskio.c: 112: Count++;
  1324  007B1C  4A2D               	infsnz	SD_Init@Count,f,c
  1325  007B1E  2A2E               	incf	SD_Init@Count+1,f,c
  1326                           
  1327                           ;diskio.c: 113: if(Count==10)
  1328  007B20  502D               	movf	SD_Init@Count,w,c
  1329  007B22  0A0A               	xorlw	10
  1330  007B24  102E               	iorwf	SD_Init@Count+1,w,c
  1331  007B26  A4D8               	btfss	status,2,c
  1332  007B28  D008               	goto	l1484
  1333                           
  1334                           ;diskio.c: 114: {
  1335                           ;diskio.c: 115: printf("Sending Command 1 Failed...\r\n");
  1336  007B2A  0E7E               	movlw	high STR_8
  1337  007B2C  6E0E               	movwf	printf@f+1,c
  1338  007B2E  0EC0               	movlw	low STR_8
  1339  007B30  6E0D               	movwf	printf@f,c
  1340  007B32  ECE1  F03D         	call	_printf	;wreg free
  1341                           
  1342                           ;diskio.c: 116: return 1;
  1343  007B36  0E01               	movlw	1
  1344  007B38  0012               	return	
  1345  007B3A                     l1484:
  1346  007B3A  0E00               	movlw	0
  1347  007B3C  6E24               	movwf	SPI_send_cmd@arg,c
  1348  007B3E  0E00               	movlw	0
  1349  007B40  6E25               	movwf	SPI_send_cmd@arg+1,c
  1350  007B42  0E00               	movlw	0
  1351  007B44  6E26               	movwf	SPI_send_cmd@arg+2,c
  1352  007B46  0E00               	movlw	0
  1353  007B48  6E27               	movwf	SPI_send_cmd@arg+3,c
  1354  007B4A  0E41               	movlw	65
  1355  007B4C  ECDA  F03C         	call	_SPI_send_cmd
  1356  007B50  0900               	iorlw	0
  1357  007B52  A4D8               	btfss	status,2,c
  1358  007B54  D7E3               	goto	l1474
  1359                           
  1360                           ;diskio.c: 117: }
  1361                           ;diskio.c: 118: }
  1362                           ;diskio.c: 119: printf("Command 1 Success..\r\n");
  1363  007B56  0E7F               	movlw	high STR_9
  1364  007B58  6E0E               	movwf	printf@f+1,c
  1365  007B5A  0E42               	movlw	low STR_9
  1366  007B5C  6E0D               	movwf	printf@f,c
  1367  007B5E  ECE1  F03D         	call	_printf	;wreg free
  1368                           
  1369                           ;diskio.c: 121: Count = 0;
  1370  007B62  0E00               	movlw	0
  1371  007B64  6E2E               	movwf	SD_Init@Count+1,c
  1372  007B66  0E00               	movlw	0
  1373  007B68  6E2D               	movwf	SD_Init@Count,c
  1374                           
  1375                           ;diskio.c: 122: printf("Sending CMD16..\r\n");
  1376  007B6A  0E7F               	movlw	high STR_10
  1377  007B6C  6E0E               	movwf	printf@f+1,c
  1378  007B6E  0E92               	movlw	low STR_10
  1379  007B70  6E0D               	movwf	printf@f,c
  1380  007B72  ECE1  F03D         	call	_printf	;wreg free
  1381                           
  1382                           ;diskio.c: 123: while( SPI_send_cmd((0x40+16),0x0200) != 0x00 )
  1383  007B76  D00F               	goto	l1502
  1384  007B78                     l1492:
  1385                           
  1386                           ;diskio.c: 124: {
  1387                           ;diskio.c: 125: Count++;
  1388  007B78  4A2D               	infsnz	SD_Init@Count,f,c
  1389  007B7A  2A2E               	incf	SD_Init@Count+1,f,c
  1390                           
  1391                           ;diskio.c: 126: if(Count==10)
  1392  007B7C  502D               	movf	SD_Init@Count,w,c
  1393  007B7E  0A0A               	xorlw	10
  1394  007B80  102E               	iorwf	SD_Init@Count+1,w,c
  1395  007B82  A4D8               	btfss	status,2,c
  1396  007B84  D008               	goto	l1502
  1397                           
  1398                           ;diskio.c: 127: {
  1399                           ;diskio.c: 128: printf("Sending Command 16 Failed...\r\n");
  1400  007B86  0E7E               	movlw	high STR_11
  1401  007B88  6E0E               	movwf	printf@f+1,c
  1402  007B8A  0E83               	movlw	low STR_11
  1403  007B8C  6E0D               	movwf	printf@f,c
  1404  007B8E  ECE1  F03D         	call	_printf	;wreg free
  1405                           
  1406                           ;diskio.c: 129: return 1;
  1407  007B92  0E01               	movlw	1
  1408  007B94  0012               	return	
  1409  007B96                     l1502:
  1410  007B96  0E00               	movlw	0
  1411  007B98  6E24               	movwf	SPI_send_cmd@arg,c
  1412  007B9A  0E02               	movlw	2
  1413  007B9C  6E25               	movwf	SPI_send_cmd@arg+1,c
  1414  007B9E  0E00               	movlw	0
  1415  007BA0  6E26               	movwf	SPI_send_cmd@arg+2,c
  1416  007BA2  0E00               	movlw	0
  1417  007BA4  6E27               	movwf	SPI_send_cmd@arg+3,c
  1418  007BA6  0E50               	movlw	80
  1419  007BA8  ECDA  F03C         	call	_SPI_send_cmd
  1420  007BAC  0900               	iorlw	0
  1421  007BAE  A4D8               	btfss	status,2,c
  1422  007BB0  D7E3               	goto	l1492
  1423                           
  1424                           ;diskio.c: 130: }
  1425                           ;diskio.c: 131: }
  1426                           ;diskio.c: 132: printf("Command 16 Success..\r\n");
  1427  007BB2  0E7F               	movlw	high STR_12
  1428  007BB4  6E0E               	movwf	printf@f+1,c
  1429  007BB6  0E15               	movlw	low STR_12
  1430  007BB8  6E0D               	movwf	printf@f,c
  1431  007BBA  ECE1  F03D         	call	_printf	;wreg free
  1432                           
  1433                           ;diskio.c: 134: return 0;
  1434  007BBE  0E00               	movlw	0
  1435  007BC0  0012               	return	
  1436  007BC2                     __end_of_SD_Init:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1h	equ	0xFE2
  1443                           fsr1l	equ	0xFE1
  1444                           indf2	equ	0xFDF
  1445                           fsr2h	equ	0xFDA
  1446                           fsr2l	equ	0xFD9
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function _SPI_send_cmd *****************
  1450 ;; Defined at:
  1451 ;;		line 152 in file "diskio.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  cmd             1    wreg     unsigned char 
  1454 ;;  arg             4   35[COMRAM] unsigned long 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  cmd             1   40[COMRAM] unsigned char 
  1457 ;;  res             1   42[COMRAM] unsigned char 
  1458 ;;  retry           1   41[COMRAM] unsigned char 
  1459 ;;  n               1    0        unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      unsigned char 
  1462 ;; Registers used:
  1463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1469 ;;      Params:         4       0       0       0       0       0       0       0       0
  1470 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1471 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1472 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1473 ;;Total ram usage:        8 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    3
  1476 ;; This function calls:
  1477 ;;		_SPI_MC_Write
  1478 ;;		_printf
  1479 ;; This function is called by:
  1480 ;;		_SD_Init
  1481 ;;		_disk_readsector
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text5
  1486  0079B4                     __ptext5:
  1487                           	opt stack 0
  1488  0079B4                     _SPI_send_cmd:
  1489                           	opt stack 26
  1490                           
  1491                           ;incstack = 0
  1492                           ;SPI_send_cmd@cmd stored from wreg
  1493  0079B4  6E29               	movwf	SPI_send_cmd@cmd,c
  1494                           
  1495                           ;diskio.c: 154: BYTE n, res;
  1496                           ;diskio.c: 155: BYTE retry = 0;
  1497  0079B6  0E00               	movlw	0
  1498  0079B8  6E2A               	movwf	SPI_send_cmd@retry,c
  1499                           
  1500                           ;diskio.c: 158: LATBbits.LATB2 = 0;
  1501  0079BA  948A               	bcf	3978,2,c	;volatile
  1502                           
  1503                           ;diskio.c: 160: SPI_MC_Write(0xff);
  1504  0079BC  0EFF               	movlw	255
  1505  0079BE  EC75  F03B         	call	_SPI_MC_Write
  1506                           
  1507                           ;diskio.c: 163: SPI_MC_Write(cmd);
  1508  0079C2  5029               	movf	SPI_send_cmd@cmd,w,c
  1509  0079C4  EC75  F03B         	call	_SPI_MC_Write
  1510                           
  1511                           ;diskio.c: 164: SPI_MC_Write((BYTE)(arg >> 24));
  1512  0079C8  5027               	movf	SPI_send_cmd@arg+3,w,c
  1513  0079CA  EC75  F03B         	call	_SPI_MC_Write
  1514                           
  1515                           ;diskio.c: 165: SPI_MC_Write((BYTE)(arg >> 16));
  1516  0079CE  5026               	movf	SPI_send_cmd@arg+2,w,c
  1517  0079D0  EC75  F03B         	call	_SPI_MC_Write
  1518                           
  1519                           ;diskio.c: 166: SPI_MC_Write((BYTE)(arg >> 8));
  1520  0079D4  5025               	movf	SPI_send_cmd@arg+1,w,c
  1521  0079D6  EC75  F03B         	call	_SPI_MC_Write
  1522                           
  1523                           ;diskio.c: 167: SPI_MC_Write((BYTE)arg);
  1524  0079DA  5024               	movf	SPI_send_cmd@arg,w,c
  1525  0079DC  EC75  F03B         	call	_SPI_MC_Write
  1526                           
  1527                           ;diskio.c: 168: SPI_MC_Write(0x95);
  1528  0079E0  0E95               	movlw	149
  1529  0079E2  EC75  F03B         	call	_SPI_MC_Write
  1530                           
  1531                           ;diskio.c: 170: switch( cmd )
  1532  0079E6  D02D               	goto	l1420
  1533  0079E8                     l1404:
  1534                           
  1535                           ;diskio.c: 175: {
  1536                           ;diskio.c: 176: _delay((unsigned long)((10)*(8000000/4000.0)));
  1537  0079E8  0E1A               	movlw	26
  1538  0079EA  6E28               	movwf	??_SPI_send_cmd& (0+255),c
  1539  0079EC  0EF8               	movlw	248
  1540  0079EE                     u987:
  1541  0079EE  2EE8               	decfsz	wreg,f,c
  1542  0079F0  D7FE               	goto	u987
  1543  0079F2  2E28               	decfsz	??_SPI_send_cmd& (0+255),f,c
  1544  0079F4  D7FC               	goto	u987
  1545  0079F6  D000               	nop2	
  1546                           
  1547                           ;diskio.c: 177: if(retry++ > 10)
  1548  0079F8  2A2A               	incf	SPI_send_cmd@retry,f,c
  1549  0079FA  0E0B               	movlw	11
  1550  0079FC  642A               	cpfsgt	SPI_send_cmd@retry& (0+255),c
  1551  0079FE  D007               	goto	l1410
  1552                           
  1553                           ;diskio.c: 178: {
  1554                           ;diskio.c: 179: printf("Timeout Error...\r\n");
  1555  007A00  0E7F               	movlw	high STR_13
  1556  007A02  6E0E               	movwf	printf@f+1,c
  1557  007A04  0E6C               	movlw	low STR_13
  1558  007A06  6E0D               	movwf	printf@f,c
  1559  007A08  ECE1  F03D         	call	_printf	;wreg free
  1560                           
  1561                           ;diskio.c: 180: break;
  1562  007A0C  D01F               	goto	l85
  1563  007A0E                     l1410:
  1564  007A0E  0EFF               	movlw	255
  1565  007A10  EC75  F03B         	call	_SPI_MC_Write
  1566  007A14  6E2B               	movwf	SPI_send_cmd@res,c
  1567  007A16  662B               	tstfsz	SPI_send_cmd@res& (0+255),c
  1568  007A18  D7E7               	goto	l1404
  1569  007A1A  D018               	goto	l85
  1570  007A1C                     l1412:
  1571                           
  1572                           ;diskio.c: 186: {
  1573                           ;diskio.c: 187: if(retry++ > 10)
  1574  007A1C  2A2A               	incf	SPI_send_cmd@retry,f,c
  1575  007A1E  0E0B               	movlw	11
  1576  007A20  642A               	cpfsgt	SPI_send_cmd@retry& (0+255),c
  1577  007A22  D007               	goto	l1416
  1578                           
  1579                           ;diskio.c: 188: {
  1580                           ;diskio.c: 189: printf("Timeout Error...\r\n");
  1581  007A24  0E7F               	movlw	high STR_13
  1582  007A26  6E0E               	movwf	printf@f+1,c
  1583  007A28  0E6C               	movlw	low STR_13
  1584  007A2A  6E0D               	movwf	printf@f,c
  1585  007A2C  ECE1  F03D         	call	_printf	;wreg free
  1586                           
  1587                           ;diskio.c: 190: break;
  1588  007A30  D00D               	goto	l85
  1589  007A32                     l1416:
  1590  007A32  0EFF               	movlw	255
  1591  007A34  EC75  F03B         	call	_SPI_MC_Write
  1592  007A38  6E2B               	movwf	SPI_send_cmd@res,c
  1593  007A3A  282B               	incf	SPI_send_cmd@res& (0+255),w,c
  1594  007A3C  A4D8               	btfss	status,2,c
  1595  007A3E  D006               	goto	l85
  1596  007A40  D7ED               	goto	l1412
  1597  007A42                     l1420:
  1598  007A42  5029               	movf	SPI_send_cmd@cmd,w,c
  1599                           
  1600                           ; Switch size 1, requested type "space"
  1601                           ; Number of cases is 1, Range of values is 65 to 65
  1602                           ; switch strategies available:
  1603                           ; Name         Instructions Cycles
  1604                           ; simple_byte            4     3 (average)
  1605                           ;	Chosen strategy is simple_byte
  1606  007A44  0A41               	xorlw	65	; case 65
  1607  007A46  B4D8               	btfsc	status,2,c
  1608  007A48  D7E2               	goto	l1410
  1609  007A4A  D7F3               	goto	l1416
  1610  007A4C                     l85:
  1611                           
  1612                           ;diskio.c: 197: LATBbits.LATB2 = 1;
  1613  007A4C  848A               	bsf	3978,2,c	;volatile
  1614                           
  1615                           ;diskio.c: 199: printf("R1 = 0x%02x\r\n",res);
  1616  007A4E  0E7F               	movlw	high STR_15
  1617  007A50  6E0E               	movwf	printf@f+1,c
  1618  007A52  0EE9               	movlw	low STR_15
  1619  007A54  6E0D               	movwf	printf@f,c
  1620  007A56  C02B  F00F         	movff	SPI_send_cmd@res,?_printf+2
  1621  007A5A  6A10               	clrf	?_printf+3,c
  1622  007A5C  ECE1  F03D         	call	_printf	;wreg free
  1623                           
  1624                           ;diskio.c: 200: return res;
  1625  007A60  502B               	movf	SPI_send_cmd@res,w,c
  1626  007A62  0012               	return	
  1627  007A64                     __end_of_SPI_send_cmd:
  1628                           	opt stack 0
  1629                           tblptru	equ	0xFF8
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1h	equ	0xFE2
  1634                           fsr1l	equ	0xFE1
  1635                           indf2	equ	0xFDF
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _printf *****************
  1641 ;; Defined at:
  1642 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1645 ;;		 -> STR_19(3), STR_18(8), STR_17(18), STR_16(20), 
  1646 ;;		 -> STR_15(14), STR_14(19), STR_13(19), STR_12(23), 
  1647 ;;		 -> STR_11(31), STR_10(18), STR_9(22), STR_8(30), 
  1648 ;;		 -> STR_7(17), STR_6(22), STR_5(30), STR_4(17), 
  1649 ;;		 -> STR_3(25), STR_2(19), STR_1(30), 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  idx             1   24[COMRAM] unsigned char 
  1652 ;;  _val            5   26[COMRAM] struct .
  1653 ;;  width           2   32[COMRAM] int 
  1654 ;;  ap              2   22[COMRAM] PTR void [1]
  1655 ;;		 -> ?_printf(2), 
  1656 ;;  c               1   34[COMRAM] char 
  1657 ;;  flag            1   31[COMRAM] unsigned char 
  1658 ;;  prec            1   25[COMRAM] char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  2   12[COMRAM] int 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1668 ;;      Params:         6       0       0       0       0       0       0       0       0
  1669 ;;      Locals:        13       0       0       0       0       0       0       0       0
  1670 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1671 ;;      Totals:        23       0       0       0       0       0       0       0       0
  1672 ;;Total ram usage:       23 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    2
  1675 ;; This function calls:
  1676 ;;		___lwdiv
  1677 ;;		___lwmod
  1678 ;;		___wmul
  1679 ;;		_isdigit
  1680 ;;		_putch
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;;		_disk_initialize
  1684 ;;		_SD_Init
  1685 ;;		_SPI_send_cmd
  1686 ;;		_disk_readsector
  1687 ;;		_disk_readsectordata
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           	psect	text6
  1692  007BC2                     __ptext6:
  1693                           	opt stack 0
  1694  007BC2                     _printf:
  1695                           	opt stack 28
  1696                           
  1697                           ;doprnt.c: 466: va_list ap;
  1698                           ;doprnt.c: 499: signed char c;
  1699                           ;doprnt.c: 501: int width;
  1700                           ;doprnt.c: 506: signed char prec;
  1701                           ;doprnt.c: 508: unsigned char flag;
  1702                           ;doprnt.c: 527: union {
  1703                           ;doprnt.c: 528: unsigned int _val;
  1704                           ;doprnt.c: 529: struct {
  1705                           ;doprnt.c: 530: const char * _cp;
  1706                           ;doprnt.c: 531: unsigned _len;
  1707                           ;doprnt.c: 532: } _str;
  1708                           ;doprnt.c: 533: } _val;
  1709                           ;doprnt.c: 542: *ap = __va_start();
  1710                           
  1711                           ;incstack = 0
  1712  007BC2  0E00               	movlw	high (?_printf+2)
  1713  007BC4  6E18               	movwf	printf@ap+1,c
  1714  007BC6  0E0F               	movlw	low (?_printf+2)
  1715  007BC8  6E17               	movwf	printf@ap,c
  1716                           
  1717                           ;doprnt.c: 545: while(c = *f++) {
  1718  007BCA  D146               	goto	l1384
  1719  007BCC                     l1282:
  1720                           
  1721                           ;doprnt.c: 547: if(c != '%')
  1722  007BCC  5023               	movf	printf@c,w,c
  1723  007BCE  0A25               	xorlw	37
  1724  007BD0  B4D8               	btfsc	status,2,c
  1725  007BD2  D004               	goto	l1286
  1726                           
  1727                           ;doprnt.c: 549: {
  1728                           ;doprnt.c: 550: (putch(c) );
  1729  007BD4  5023               	movf	printf@c,w,c
  1730  007BD6  EC40  F03B         	call	_putch
  1731                           
  1732                           ;doprnt.c: 551: continue;
  1733  007BDA  D13E               	goto	l1384
  1734  007BDC                     l1286:
  1735                           
  1736                           ;doprnt.c: 552: }
  1737                           ;doprnt.c: 555: width = 0;
  1738  007BDC  0E00               	movlw	0
  1739  007BDE  6E22               	movwf	printf@width+1,c
  1740  007BE0  0E00               	movlw	0
  1741  007BE2  6E21               	movwf	printf@width,c
  1742                           
  1743                           ;doprnt.c: 557: flag = 0;
  1744  007BE4  0E00               	movlw	0
  1745  007BE6  6E20               	movwf	printf@flag,c
  1746  007BE8  D003               	goto	l1292
  1747  007BEA                     l1288:
  1748                           
  1749                           ;doprnt.c: 589: flag |= 0x04;
  1750  007BEA  8420               	bsf	printf@flag,2,c
  1751                           
  1752                           ;doprnt.c: 590: f++;
  1753  007BEC  4A0D               	infsnz	printf@f,f,c
  1754  007BEE  2A0E               	incf	printf@f+1,f,c
  1755  007BF0                     l1292:
  1756  007BF0  C00D  FFF6         	movff	printf@f,tblptrl
  1757  007BF4  C00E  FFF7         	movff	printf@f+1,tblptrh
  1758  007BF8                     	if	0	;tblptru may be non-zero
  1759  007BF8                     	endif
  1760  007BF8                     	if	0	;tblptru may be non-zero
  1761  007BF8                     	endif
  1762  007BF8  0008               	tblrd		*
  1763  007BFA  50F5               	movf	tablat,w,c
  1764                           
  1765                           ; Switch size 1, requested type "space"
  1766                           ; Number of cases is 1, Range of values is 48 to 48
  1767                           ; switch strategies available:
  1768                           ; Name         Instructions Cycles
  1769                           ; simple_byte            4     3 (average)
  1770                           ;	Chosen strategy is simple_byte
  1771  007BFC  0A30               	xorlw	48	; case 48
  1772  007BFE  B4D8               	btfsc	status,2,c
  1773  007C00  D7F4               	goto	l1288
  1774                           
  1775                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1776                           
  1777                           ;doprnt.c: 595: }
  1778                           
  1779                           ;doprnt.c: 594: break;
  1780  007C02  C00D  FFF6         	movff	printf@f,tblptrl
  1781  007C06  C00E  FFF7         	movff	printf@f+1,tblptrh
  1782  007C0A                     	if	0	;tblptru may be non-zero
  1783  007C0A                     	endif
  1784  007C0A                     	if	0	;tblptru may be non-zero
  1785  007C0A                     	endif
  1786  007C0A  0008               	tblrd		*
  1787  007C0C  50F5               	movf	tablat,w,c
  1788  007C0E  EC84  F03B         	call	_isdigit
  1789  007C12  A0D8               	btfss	status,0,c
  1790  007C14  D038               	goto	l1312
  1791                           
  1792                           ;doprnt.c: 607: width = 0;
  1793  007C16  0E00               	movlw	0
  1794  007C18  6E22               	movwf	printf@width+1,c
  1795  007C1A  0E00               	movlw	0
  1796  007C1C  6E21               	movwf	printf@width,c
  1797  007C1E                     l1298:
  1798                           
  1799                           ;doprnt.c: 609: width *= 10;
  1800  007C1E  C021  F001         	movff	printf@width,___wmul@multiplier
  1801  007C22  C022  F002         	movff	printf@width+1,___wmul@multiplier+1
  1802  007C26  0E00               	movlw	0
  1803  007C28  6E04               	movwf	___wmul@multiplicand+1,c
  1804  007C2A  0E0A               	movlw	10
  1805  007C2C  6E03               	movwf	___wmul@multiplicand,c
  1806  007C2E  ECA4  F03B         	call	___wmul	;wreg free
  1807  007C32  C001  F021         	movff	?___wmul,printf@width
  1808  007C36  C002  F022         	movff	?___wmul+1,printf@width+1
  1809                           
  1810                           ;doprnt.c: 610: width += *f++ - '0';
  1811  007C3A  0ED0               	movlw	208
  1812  007C3C  6E13               	movwf	??_printf& (0+255),c
  1813  007C3E  0EFF               	movlw	255
  1814  007C40  6E14               	movwf	(??_printf+1)& (0+255),c
  1815  007C42  C00D  FFF6         	movff	printf@f,tblptrl
  1816  007C46  C00E  FFF7         	movff	printf@f+1,tblptrh
  1817  007C4A                     	if	0	;tblptru may be non-zero
  1818  007C4A                     	endif
  1819  007C4A                     	if	0	;tblptru may be non-zero
  1820  007C4A                     	endif
  1821  007C4A  0008               	tblrd		*
  1822  007C4C  50F5               	movf	tablat,w,c
  1823  007C4E  6E15               	movwf	(??_printf+2)& (0+255),c
  1824  007C50  6A16               	clrf	(??_printf+3)& (0+255),c
  1825  007C52  5013               	movf	??_printf,w,c
  1826  007C54  2615               	addwf	??_printf+2,f,c
  1827  007C56  5014               	movf	??_printf+1,w,c
  1828  007C58  2216               	addwfc	??_printf+3,f,c
  1829  007C5A  5015               	movf	??_printf+2,w,c
  1830  007C5C  2621               	addwf	printf@width,f,c
  1831  007C5E  5016               	movf	??_printf+3,w,c
  1832  007C60  2222               	addwfc	printf@width+1,f,c
  1833  007C62  4A0D               	infsnz	printf@f,f,c
  1834  007C64  2A0E               	incf	printf@f+1,f,c
  1835                           
  1836                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1837  007C66  C00D  FFF6         	movff	printf@f,tblptrl
  1838  007C6A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1839  007C6E                     	if	0	;tblptru may be non-zero
  1840  007C6E                     	endif
  1841  007C6E                     	if	0	;tblptru may be non-zero
  1842  007C6E                     	endif
  1843  007C6E  0008               	tblrd		*
  1844  007C70  50F5               	movf	tablat,w,c
  1845  007C72  EC84  F03B         	call	_isdigit
  1846  007C76  A0D8               	btfss	status,0,c
  1847  007C78  D006               	goto	l1312
  1848  007C7A  D7D1               	goto	l1298
  1849  007C7C                     l1306:
  1850                           
  1851                           ;doprnt.c: 730: flag |= 0x80;
  1852  007C7C  8E20               	bsf	printf@flag,7,c
  1853                           
  1854                           ;doprnt.c: 732: break;
  1855  007C7E  D017               	goto	l1314
  1856  007C80                     l1308:
  1857                           
  1858                           ;doprnt.c: 827: flag |= 0xC0;
  1859  007C80  0EC0               	movlw	192
  1860  007C82  1220               	iorwf	printf@flag,f,c
  1861                           
  1862                           ;doprnt.c: 828: break;
  1863  007C84  D014               	goto	l1314
  1864  007C86                     l1312:
  1865  007C86  C00D  FFF6         	movff	printf@f,tblptrl
  1866  007C8A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1867  007C8E  4A0D               	infsnz	printf@f,f,c
  1868  007C90  2A0E               	incf	printf@f+1,f,c
  1869  007C92                     	if	0	;tblptru may be non-zero
  1870  007C92                     	endif
  1871  007C92                     	if	0	;tblptru may be non-zero
  1872  007C92                     	endif
  1873  007C92  0008               	tblrd		*
  1874  007C94  CFF5 F023          	movff	tablat,printf@c
  1875  007C98  5023               	movf	printf@c& (0+255),w,c
  1876                           
  1877                           ; Switch size 1, requested type "space"
  1878                           ; Number of cases is 3, Range of values is 0 to 120
  1879                           ; switch strategies available:
  1880                           ; Name         Instructions Cycles
  1881                           ; simple_byte           10     6 (average)
  1882                           ;	Chosen strategy is simple_byte
  1883  007C9A  0A00               	xorlw	0	; case 0
  1884  007C9C  B4D8               	btfsc	status,2,c
  1885  007C9E  0012               	return	
  1886  007CA0  0A75               	xorlw	117	; case 117
  1887  007CA2  B4D8               	btfsc	status,2,c
  1888  007CA4  D7ED               	goto	l1308
  1889  007CA6  0A0D               	xorlw	13	; case 120
  1890  007CA8  B4D8               	btfsc	status,2,c
  1891  007CAA  D7E8               	goto	l1306
  1892  007CAC  D0D5               	goto	l1384
  1893  007CAE                     l1314:
  1894                           
  1895                           ;doprnt.c: 1282: {
  1896                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1897  007CAE  C017  FFD9         	movff	printf@ap,fsr2l
  1898  007CB2  C018  FFDA         	movff	printf@ap+1,fsr2h
  1899  007CB6  CFDE F01B          	movff	postinc2,printf@_val
  1900  007CBA  CFDD F01C          	movff	postdec2,printf@_val+1
  1901  007CBE  0E02               	movlw	2
  1902  007CC0  2617               	addwf	printf@ap,f,c
  1903  007CC2  0E00               	movlw	0
  1904  007CC4  2218               	addwfc	printf@ap+1,f,c
  1905                           
  1906                           ;doprnt.c: 1296: }
  1907                           ;doprnt.c: 1303: switch((unsigned char)(flag & (0xC0))) {
  1908  007CC6  D038               	goto	l1348
  1909  007CC8                     l1318:
  1910                           
  1911                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1912  007CC8  0E01               	movlw	1
  1913  007CCA  6E23               	movwf	printf@c,c
  1914  007CCC  5023               	movf	printf@c,w,c
  1915  007CCE  0A05               	xorlw	5
  1916  007CD0  B4D8               	btfsc	status,2,c
  1917  007CD2  D03A               	goto	l1350
  1918                           
  1919                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1920  007CD4  5023               	movf	printf@c,w,c
  1921  007CD6  0D02               	mullw	2
  1922  007CD8  0E71               	movlw	low _dpowers
  1923  007CDA  24F3               	addwf	prodl,w,c
  1924  007CDC  6EF6               	movwf	tblptrl,c
  1925  007CDE  0E7E               	movlw	high _dpowers
  1926  007CE0  20F4               	addwfc	prodh,w,c
  1927  007CE2  6EF7               	movwf	tblptrh,c
  1928  007CE4                     	if	0	;There are less than 3 active tblptr bytes
  1929  007CE4                     	endif
  1930  007CE4  0009               	tblrd		*+
  1931  007CE6  CFF5 F013          	movff	tablat,??_printf
  1932  007CEA  0009               	tblrd		*+
  1933  007CEC  CFF5 F014          	movff	tablat,??_printf+1
  1934  007CF0  5013               	movf	??_printf,w,c
  1935  007CF2  5C1B               	subwf	printf@_val,w,c
  1936  007CF4  5014               	movf	??_printf+1,w,c
  1937  007CF6  581C               	subwfb	printf@_val+1,w,c
  1938  007CF8  A0D8               	btfss	status,0,c
  1939  007CFA  D026               	goto	l1350
  1940                           
  1941                           ;doprnt.c: 1316: break;
  1942  007CFC  2A23               	incf	printf@c,f,c
  1943  007CFE  D7E6               	goto	L4
  1944  007D00                     l1332:
  1945                           
  1946                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1947  007D00  0E01               	movlw	1
  1948  007D02  6E23               	movwf	printf@c,c
  1949  007D04  5023               	movf	printf@c,w,c
  1950  007D06  0A04               	xorlw	4
  1951  007D08  B4D8               	btfsc	status,2,c
  1952  007D0A  D01E               	goto	l1350
  1953                           
  1954                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  1955  007D0C  5023               	movf	printf@c,w,c
  1956  007D0E  0D02               	mullw	2
  1957  007D10  0E7B               	movlw	low _hexpowers
  1958  007D12  24F3               	addwf	prodl,w,c
  1959  007D14  6EF6               	movwf	tblptrl,c
  1960  007D16  0E7E               	movlw	high _hexpowers
  1961  007D18  20F4               	addwfc	prodh,w,c
  1962  007D1A  6EF7               	movwf	tblptrh,c
  1963  007D1C                     	if	0	;There are less than 3 active tblptr bytes
  1964  007D1C                     	endif
  1965  007D1C  0009               	tblrd		*+
  1966  007D1E  CFF5 F013          	movff	tablat,??_printf
  1967  007D22  0009               	tblrd		*+
  1968  007D24  CFF5 F014          	movff	tablat,??_printf+1
  1969  007D28  5013               	movf	??_printf,w,c
  1970  007D2A  5C1B               	subwf	printf@_val,w,c
  1971  007D2C  5014               	movf	??_printf+1,w,c
  1972  007D2E  581C               	subwfb	printf@_val+1,w,c
  1973  007D30  A0D8               	btfss	status,0,c
  1974  007D32  D00A               	goto	l1350
  1975                           
  1976                           ;doprnt.c: 1327: break;
  1977  007D34  2A23               	incf	printf@c,f,c
  1978  007D36  D7E6               	goto	L5
  1979  007D38                     l1348:
  1980  007D38  5020               	movf	printf@flag,w,c
  1981  007D3A  0BC0               	andlw	192
  1982                           
  1983                           ; Switch size 1, requested type "space"
  1984                           ; Number of cases is 2, Range of values is 128 to 192
  1985                           ; switch strategies available:
  1986                           ; Name         Instructions Cycles
  1987                           ; simple_byte            7     4 (average)
  1988                           ;	Chosen strategy is simple_byte
  1989  007D3C  0A80               	xorlw	128	; case 128
  1990  007D3E  B4D8               	btfsc	status,2,c
  1991  007D40  D7DF               	goto	l1332
  1992  007D42  0A40               	xorlw	64	; case 192
  1993  007D44  B4D8               	btfsc	status,2,c
  1994  007D46  D7C0               	goto	l1318
  1995  007D48                     l1350:
  1996                           
  1997                           ;doprnt.c: 1390: if(width > c)
  1998  007D48  0E80               	movlw	128
  1999  007D4A  BE23               	btfsc	printf@c,7,c
  2000  007D4C  0E7F               	movlw	127
  2001  007D4E  6E13               	movwf	??_printf& (0+255),c
  2002  007D50  5021               	movf	printf@width,w,c
  2003  007D52  5C23               	subwf	printf@c,w,c
  2004  007D54  5022               	movf	printf@width+1,w,c
  2005  007D56  0A80               	xorlw	128
  2006  007D58  5813               	subwfb	??_printf& (0+255),w,c
  2007  007D5A  B0D8               	btfsc	status,0,c
  2008  007D5C  D007               	goto	l1354
  2009                           
  2010                           ;doprnt.c: 1391: width -= c;
  2011  007D5E  5023               	movf	printf@c,w,c
  2012  007D60  5E21               	subwf	printf@width,f,c
  2013  007D62  0E00               	movlw	0
  2014  007D64  BE23               	btfsc	printf@c,7,c
  2015  007D66  0EFF               	movlw	255
  2016  007D68  5A22               	subwfb	printf@width+1,f,c
  2017  007D6A  D004               	goto	l1356
  2018  007D6C                     l1354:
  2019                           
  2020                           ;doprnt.c: 1392: else
  2021                           ;doprnt.c: 1393: width = 0;
  2022  007D6C  0E00               	movlw	0
  2023  007D6E  6E22               	movwf	printf@width+1,c
  2024  007D70  0E00               	movlw	0
  2025  007D72  6E21               	movwf	printf@width,c
  2026  007D74                     l1356:
  2027                           
  2028                           ;doprnt.c: 1396: if(flag & 0x04) {
  2029  007D74  A420               	btfss	printf@flag,2,c
  2030  007D76  D00B               	goto	l1364
  2031  007D78                     
  2032                           ;doprnt.c: 1424: if(width)
  2033  007D78  5022               	movf	printf@width+1,w,c
  2034  007D7A  1021               	iorwf	printf@width,w,c
  2035  007D7C  B4D8               	btfsc	status,2,c
  2036  007D7E  D015               	goto	l184
  2037                           
  2038                           ;doprnt.c: 1426: (putch('0') );
  2039                           
  2040                           ;doprnt.c: 1425: do
  2041  007D80  0E30               	movlw	48
  2042  007D82  EC40  F03B         	call	_putch
  2043                           
  2044                           ;doprnt.c: 1427: while(--width);
  2045  007D86  0621               	decf	printf@width,f,c
  2046  007D88  A0D8               	btfss	status,0,c
  2047  007D8A  0622               	decf	printf@width+1,f,c
  2048  007D8C  D7F5               	goto	L6
  2049  007D8E                     l1364:
  2050                           
  2051                           ;doprnt.c: 1431: {
  2052                           ;doprnt.c: 1433: if(width
  2053                           ;doprnt.c: 1437: )
  2054  007D8E  5022               	movf	printf@width+1,w,c
  2055  007D90  1021               	iorwf	printf@width,w,c
  2056  007D92  B4D8               	btfsc	status,2,c
  2057  007D94  D00A               	goto	l184
  2058  007D96                     l1366:
  2059                           
  2060                           ;doprnt.c: 1439: (putch(' ') );
  2061  007D96  0E20               	movlw	32
  2062  007D98  EC40  F03B         	call	_putch
  2063                           
  2064                           ;doprnt.c: 1440: while(--width);
  2065  007D9C  0621               	decf	printf@width,f,c
  2066  007D9E  A0D8               	btfss	status,0,c
  2067  007DA0  0622               	decf	printf@width+1,f,c
  2068  007DA2  5022               	movf	(printf@width+1)& (0+255),w,c
  2069  007DA4  1021               	iorwf	printf@width& (0+255),w,c
  2070  007DA6  A4D8               	btfss	status,2,c
  2071  007DA8  D7F6               	goto	l1366
  2072  007DAA                     l184:
  2073                           
  2074                           ;doprnt.c: 1478: }
  2075                           ;doprnt.c: 1481: prec = c;
  2076  007DAA  C023  F01A         	movff	printf@c,printf@prec
  2077                           
  2078                           ;doprnt.c: 1483: while(prec--) {
  2079  007DAE  D050               	goto	l1382
  2080  007DB0                     l1370:
  2081                           
  2082                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2083  007DB0  501A               	movf	printf@prec,w,c
  2084  007DB2  0D02               	mullw	2
  2085  007DB4  0E71               	movlw	low _dpowers
  2086  007DB6  24F3               	addwf	prodl,w,c
  2087  007DB8  6EF6               	movwf	tblptrl,c
  2088  007DBA  0E7E               	movlw	high _dpowers
  2089  007DBC  20F4               	addwfc	prodh,w,c
  2090  007DBE  6EF7               	movwf	tblptrh,c
  2091  007DC0                     	if	0	;There are less than 3 active tblptr bytes
  2092  007DC0                     	endif
  2093  007DC0  0009               	tblrd		*+
  2094  007DC2  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2095  007DC6  000A               	tblrd		*-
  2096  007DC8  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2097  007DCC  C01B  F001         	movff	printf@_val,___lwdiv@dividend
  2098  007DD0  C01C  F002         	movff	printf@_val+1,___lwdiv@dividend+1
  2099  007DD4  ECFD  F03B         	call	___lwdiv	;wreg free
  2100  007DD8  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2101  007DDC  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2102  007DE0  0E00               	movlw	0
  2103  007DE2  6E0B               	movwf	___lwmod@divisor+1,c
  2104  007DE4  0E0A               	movlw	10
  2105  007DE6  6E0A               	movwf	___lwmod@divisor,c
  2106  007DE8  ECB7  F03B         	call	___lwmod	;wreg free
  2107  007DEC  5008               	movf	?___lwmod,w,c
  2108  007DEE  0F30               	addlw	48
  2109  007DF0  6E23               	movwf	printf@c,c
  2110                           
  2111                           ;doprnt.c: 1500: break;
  2112  007DF2  D02B               	goto	l1380
  2113  007DF4                     l1372:
  2114                           
  2115                           ;doprnt.c: 1508: {
  2116                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  2117  007DF4  C01B  F001         	movff	printf@_val,___lwdiv@dividend
  2118  007DF8  C01C  F002         	movff	printf@_val+1,___lwdiv@dividend+1
  2119  007DFC  501A               	movf	printf@prec,w,c
  2120  007DFE  0D02               	mullw	2
  2121  007E00  0E7B               	movlw	low _hexpowers
  2122  007E02  24F3               	addwf	prodl,w,c
  2123  007E04  6EF6               	movwf	tblptrl,c
  2124  007E06  0E7E               	movlw	high _hexpowers
  2125  007E08  20F4               	addwfc	prodh,w,c
  2126  007E0A  6EF7               	movwf	tblptrh,c
  2127  007E0C                     	if	0	;There are less than 3 active tblptr bytes
  2128  007E0C                     	endif
  2129  007E0C  0009               	tblrd		*+
  2130  007E0E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2131  007E12  000A               	tblrd		*-
  2132  007E14  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2133  007E18  ECFD  F03B         	call	___lwdiv	;wreg free
  2134  007E1C  5001               	movf	?___lwdiv,w,c
  2135  007E1E  0B0F               	andlw	15
  2136  007E20  6E19               	movwf	printf@idx,c
  2137                           
  2138                           ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
  2139  007E22  5019               	movf	printf@idx,w,c
  2140  007E24  0D01               	mullw	1
  2141  007E26  0EB6               	movlw	low STR_20
  2142  007E28  24F3               	addwf	prodl,w,c
  2143  007E2A  6EF6               	movwf	tblptrl,c
  2144  007E2C  0E7F               	movlw	high STR_20
  2145  007E2E  20F4               	addwfc	prodh,w,c
  2146  007E30  6EF7               	movwf	tblptrh,c
  2147  007E32                     	if	0	;There are less than 3 active tblptr bytes
  2148  007E32                     	endif
  2149  007E32  0008               	tblrd		*
  2150  007E34  CFF5 F023          	movff	tablat,printf@c
  2151                           
  2152                           ;doprnt.c: 1517: }
  2153                           ;doprnt.c: 1519: break;
  2154  007E38  D008               	goto	l1380
  2155  007E3A                     l1378:
  2156  007E3A  5020               	movf	printf@flag,w,c
  2157  007E3C  0BC0               	andlw	192
  2158                           
  2159                           ; Switch size 1, requested type "space"
  2160                           ; Number of cases is 2, Range of values is 128 to 192
  2161                           ; switch strategies available:
  2162                           ; Name         Instructions Cycles
  2163                           ; simple_byte            7     4 (average)
  2164                           ;	Chosen strategy is simple_byte
  2165  007E3E  0A80               	xorlw	128	; case 128
  2166  007E40  B4D8               	btfsc	status,2,c
  2167  007E42  D7D8               	goto	l1372
  2168  007E44  0A40               	xorlw	64	; case 192
  2169  007E46  B4D8               	btfsc	status,2,c
  2170  007E48  D7B3               	goto	l1370
  2171  007E4A                     l1380:
  2172                           
  2173                           ;doprnt.c: 1533: (putch(c) );
  2174  007E4A  5023               	movf	printf@c,w,c
  2175  007E4C  EC40  F03B         	call	_putch
  2176  007E50                     l1382:
  2177  007E50  061A               	decf	printf@prec,f,c
  2178  007E52  281A               	incf	printf@prec& (0+255),w,c
  2179  007E54  A4D8               	btfss	status,2,c
  2180  007E56  D7F1               	goto	l1378
  2181  007E58                     l1384:
  2182  007E58  C00D  FFF6         	movff	printf@f,tblptrl
  2183  007E5C  C00E  FFF7         	movff	printf@f+1,tblptrh
  2184  007E60  4A0D               	infsnz	printf@f,f,c
  2185  007E62  2A0E               	incf	printf@f+1,f,c
  2186  007E64                     	if	0	;tblptru may be non-zero
  2187  007E64                     	endif
  2188  007E64                     	if	0	;tblptru may be non-zero
  2189  007E64                     	endif
  2190  007E64  0008               	tblrd		*
  2191  007E66  CFF5 F023          	movff	tablat,printf@c
  2192  007E6A  6623               	tstfsz	printf@c& (0+255),c
  2193  007E6C  D6AF               	goto	l1282
  2194  007E6E  0012               	return	
  2195  007E70                     __end_of_printf:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           prodh	equ	0xFF4
  2202                           prodl	equ	0xFF3
  2203                           postinc0	equ	0xFEE
  2204                           wreg	equ	0xFE8
  2205                           postdec1	equ	0xFE5
  2206                           fsr1h	equ	0xFE2
  2207                           fsr1l	equ	0xFE1
  2208                           indf2	equ	0xFDF
  2209                           postinc2	equ	0xFDE
  2210                           postdec2	equ	0xFDD
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _putch *****************
  2216 ;; Defined at:
  2217 ;;		line 97 in file "PICSD.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  data            1    wreg     unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  data            1    1[COMRAM] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;		None               void
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2231 ;;      Params:         0       0       0       0       0       0       0       0       0
  2232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2234 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2235 ;;Total ram usage:        1 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    1
  2238 ;; This function calls:
  2239 ;;		_Write1USART
  2240 ;; This function is called by:
  2241 ;;		_printf
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text7
  2246  007680                     __ptext7:
  2247                           	opt stack 0
  2248  007680                     _putch:
  2249                           	opt stack 28
  2250                           
  2251                           ;incstack = 0
  2252                           ;putch@data stored from wreg
  2253  007680  6E02               	movwf	putch@data,c
  2254                           
  2255                           ;PICSD.c: 99: Write1USART(data);
  2256  007682  5002               	movf	putch@data,w,c
  2257  007684  EC47  F03B         	call	_Write1USART
  2258  007688                     l25:
  2259  007688  B2AC               	btfsc	4012,1,c	;volatile
  2260  00768A  0012               	return	
  2261  00768C  D7FD               	goto	l25
  2262  00768E                     __end_of_putch:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           prodh	equ	0xFF4
  2269                           prodl	equ	0xFF3
  2270                           postinc0	equ	0xFEE
  2271                           wreg	equ	0xFE8
  2272                           postdec1	equ	0xFE5
  2273                           fsr1h	equ	0xFE2
  2274                           fsr1l	equ	0xFE1
  2275                           indf2	equ	0xFDF
  2276                           postinc2	equ	0xFDE
  2277                           postdec2	equ	0xFDD
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function _Write1USART *****************
  2283 ;; Defined at:
  2284 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\u1write.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  data            1    wreg     unsigned char 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  data            1    0[COMRAM] unsigned char 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;		None               void
  2291 ;; Registers used:
  2292 ;;		wreg
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2298 ;;      Params:         0       0       0       0       0       0       0       0       0
  2299 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2301 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2302 ;;Total ram usage:        1 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; This function calls:
  2305 ;;		Nothing
  2306 ;; This function is called by:
  2307 ;;		_putch
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text8
  2312  00768E                     __ptext8:
  2313                           	opt stack 0
  2314  00768E                     _Write1USART:
  2315                           	opt stack 28
  2316                           
  2317                           ;incstack = 0
  2318                           ;Write1USART@data stored from wreg
  2319  00768E  6E01               	movwf	Write1USART@data,c
  2320  007690  ACAC               	btfss	4012,6,c	;volatile
  2321  007692  D003               	goto	l832
  2322  007694  90AC               	bcf	4012,0,c	;volatile
  2323  007696  B239               	btfsc	_USART1_Status,1,c
  2324  007698  80AC               	bsf	4012,0,c	;volatile
  2325  00769A                     l832:
  2326  00769A  C001  FFAD         	movff	Write1USART@data,4013	;volatile
  2327  00769E  0012               	return	
  2328  0076A0                     __end_of_Write1USART:
  2329                           	opt stack 0
  2330                           tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           prodh	equ	0xFF4
  2335                           prodl	equ	0xFF3
  2336                           postinc0	equ	0xFEE
  2337                           wreg	equ	0xFE8
  2338                           postdec1	equ	0xFE5
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _isdigit *****************
  2349 ;; Defined at:
  2350 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  c               1    wreg     unsigned char 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  c               1    2[COMRAM] unsigned char 
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2364 ;;      Params:         0       0       0       0       0       0       0       0       0
  2365 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2366 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2367 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2368 ;;Total ram usage:        3 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_printf
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text9
  2378  007708                     __ptext9:
  2379                           	opt stack 0
  2380  007708                     _isdigit:
  2381                           	opt stack 29
  2382                           
  2383                           ;incstack = 0
  2384                           ;isdigit@c stored from wreg
  2385  007708  6E03               	movwf	isdigit@c,c
  2386  00770A  0E00               	movlw	0
  2387  00770C  6E02               	movwf	_isdigit$1326,c
  2388  00770E  0E3A               	movlw	58
  2389  007710  5C03               	subwf	isdigit@c,w,c
  2390  007712  B0D8               	btfsc	status,0,c
  2391  007714  D005               	goto	l1276
  2392  007716  0E2F               	movlw	47
  2393  007718  6403               	cpfsgt	isdigit@c,c
  2394  00771A  D002               	goto	l1276
  2395  00771C  0E01               	movlw	1
  2396  00771E  6E02               	movwf	_isdigit$1326,c
  2397  007720                     l1276:
  2398  007720  C002  F001         	movff	_isdigit$1326,??_isdigit
  2399  007724  3001               	rrcf	??_isdigit,w,c
  2400  007726  0012               	return	
  2401  007728                     __end_of_isdigit:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1h	equ	0xFE2
  2413                           fsr1l	equ	0xFE1
  2414                           indf2	equ	0xFDF
  2415                           postinc2	equ	0xFDE
  2416                           postdec2	equ	0xFDD
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function ___wmul *****************
  2422 ;; Defined at:
  2423 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  multiplier      2    0[COMRAM] unsigned int 
  2426 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  product         2    4[COMRAM] unsigned int 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  2    0[COMRAM] unsigned int 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, prodl, prodh
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2438 ;;      Params:         4       0       0       0       0       0       0       0       0
  2439 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2441 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2442 ;;Total ram usage:        6 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_printf
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text10
  2452  007748                     __ptext10:
  2453                           	opt stack 0
  2454  007748                     ___wmul:
  2455                           	opt stack 29
  2456                           
  2457                           ;incstack = 0
  2458  007748  5001               	movf	___wmul@multiplier,w,c
  2459  00774A  0203               	mulwf	___wmul@multiplicand,c
  2460  00774C  CFF3 F005          	movff	prodl,___wmul@product
  2461  007750  CFF4 F006          	movff	prodh,___wmul@product+1
  2462  007754  5001               	movf	___wmul@multiplier,w,c
  2463  007756  0204               	mulwf	___wmul@multiplicand+1,c
  2464  007758  50F3               	movf	prodl,w,c
  2465  00775A  2606               	addwf	___wmul@product+1,f,c
  2466  00775C  5002               	movf	___wmul@multiplier+1,w,c
  2467  00775E  0203               	mulwf	___wmul@multiplicand,c
  2468  007760  50F3               	movf	prodl,w,c
  2469  007762  2606               	addwf	___wmul@product+1,f,c
  2470  007764  C005  F001         	movff	___wmul@product,?___wmul
  2471  007768  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2472  00776C  0012               	return	
  2473  00776E                     __end_of___wmul:
  2474                           	opt stack 0
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           prodh	equ	0xFF4
  2480                           prodl	equ	0xFF3
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1h	equ	0xFE2
  2485                           fsr1l	equ	0xFE1
  2486                           indf2	equ	0xFDF
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function ___lwmod *****************
  2494 ;; Defined at:
  2495 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  dividend        2    7[COMRAM] unsigned int 
  2498 ;;  divisor         2    9[COMRAM] unsigned int 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  counter         1   11[COMRAM] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  2    7[COMRAM] unsigned int 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2510 ;;      Params:         4       0       0       0       0       0       0       0       0
  2511 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2513 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2514 ;;Total ram usage:        5 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; This function calls:
  2517 ;;		Nothing
  2518 ;; This function is called by:
  2519 ;;		_printf
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text11
  2524  00776E                     __ptext11:
  2525                           	opt stack 0
  2526  00776E                     ___lwmod:
  2527                           	opt stack 29
  2528                           
  2529                           ;incstack = 0
  2530  00776E  500B               	movf	___lwmod@divisor+1,w,c
  2531  007770  100A               	iorwf	___lwmod@divisor,w,c
  2532  007772  B4D8               	btfsc	status,2,c
  2533  007774  D018               	goto	l765
  2534  007776  0E01               	movlw	1
  2535  007778  6E0C               	movwf	___lwmod@counter,c
  2536  00777A  D004               	goto	l882
  2537  00777C                     l880:
  2538  00777C  90D8               	bcf	status,0,c
  2539  00777E  360A               	rlcf	___lwmod@divisor,f,c
  2540  007780  360B               	rlcf	___lwmod@divisor+1,f,c
  2541  007782  2A0C               	incf	___lwmod@counter,f,c
  2542  007784                     l882:
  2543  007784  AE0B               	btfss	___lwmod@divisor+1,7,c
  2544  007786  D7FA               	goto	l880
  2545  007788                     l884:
  2546  007788  500A               	movf	___lwmod@divisor,w,c
  2547  00778A  5C08               	subwf	___lwmod@dividend,w,c
  2548  00778C  500B               	movf	___lwmod@divisor+1,w,c
  2549  00778E  5809               	subwfb	___lwmod@dividend+1,w,c
  2550  007790  A0D8               	btfss	status,0,c
  2551  007792  D004               	goto	l888
  2552  007794  500A               	movf	___lwmod@divisor,w,c
  2553  007796  5E08               	subwf	___lwmod@dividend,f,c
  2554  007798  500B               	movf	___lwmod@divisor+1,w,c
  2555  00779A  5A09               	subwfb	___lwmod@dividend+1,f,c
  2556  00779C                     l888:
  2557  00779C  90D8               	bcf	status,0,c
  2558  00779E  320B               	rrcf	___lwmod@divisor+1,f,c
  2559  0077A0  320A               	rrcf	___lwmod@divisor,f,c
  2560  0077A2  2E0C               	decfsz	___lwmod@counter,f,c
  2561  0077A4  D7F1               	goto	l884
  2562  0077A6                     l765:
  2563  0077A6  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2564  0077AA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2565  0077AE  0012               	return	
  2566  0077B0                     __end_of___lwmod:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           postinc0	equ	0xFEE
  2575                           wreg	equ	0xFE8
  2576                           postdec1	equ	0xFE5
  2577                           fsr1h	equ	0xFE2
  2578                           fsr1l	equ	0xFE1
  2579                           indf2	equ	0xFDF
  2580                           postinc2	equ	0xFDE
  2581                           postdec2	equ	0xFDD
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function ___lwdiv *****************
  2587 ;; Defined at:
  2588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  dividend        2    0[COMRAM] unsigned int 
  2591 ;;  divisor         2    2[COMRAM] unsigned int 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  quotient        2    4[COMRAM] unsigned int 
  2594 ;;  counter         1    6[COMRAM] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  2    0[COMRAM] unsigned int 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2604 ;;      Params:         4       0       0       0       0       0       0       0       0
  2605 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2607 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2608 ;;Total ram usage:        7 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_printf
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text12
  2618  0077FA                     __ptext12:
  2619                           	opt stack 0
  2620  0077FA                     ___lwdiv:
  2621                           	opt stack 29
  2622                           
  2623                           ;incstack = 0
  2624  0077FA  0E00               	movlw	0
  2625  0077FC  6E06               	movwf	___lwdiv@quotient+1,c
  2626  0077FE  0E00               	movlw	0
  2627  007800  6E05               	movwf	___lwdiv@quotient,c
  2628  007802  5004               	movf	___lwdiv@divisor+1,w,c
  2629  007804  1003               	iorwf	___lwdiv@divisor,w,c
  2630  007806  B4D8               	btfsc	status,2,c
  2631  007808  D01C               	goto	l755
  2632  00780A  0E01               	movlw	1
  2633  00780C  6E07               	movwf	___lwdiv@counter,c
  2634  00780E  D004               	goto	l862
  2635  007810                     l860:
  2636  007810  90D8               	bcf	status,0,c
  2637  007812  3603               	rlcf	___lwdiv@divisor,f,c
  2638  007814  3604               	rlcf	___lwdiv@divisor+1,f,c
  2639  007816  2A07               	incf	___lwdiv@counter,f,c
  2640  007818                     l862:
  2641  007818  AE04               	btfss	___lwdiv@divisor+1,7,c
  2642  00781A  D7FA               	goto	l860
  2643  00781C                     l864:
  2644  00781C  90D8               	bcf	status,0,c
  2645  00781E  3605               	rlcf	___lwdiv@quotient,f,c
  2646  007820  3606               	rlcf	___lwdiv@quotient+1,f,c
  2647  007822  5003               	movf	___lwdiv@divisor,w,c
  2648  007824  5C01               	subwf	___lwdiv@dividend,w,c
  2649  007826  5004               	movf	___lwdiv@divisor+1,w,c
  2650  007828  5802               	subwfb	___lwdiv@dividend+1,w,c
  2651  00782A  A0D8               	btfss	status,0,c
  2652  00782C  D005               	goto	l872
  2653  00782E  5003               	movf	___lwdiv@divisor,w,c
  2654  007830  5E01               	subwf	___lwdiv@dividend,f,c
  2655  007832  5004               	movf	___lwdiv@divisor+1,w,c
  2656  007834  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2657  007836  8005               	bsf	___lwdiv@quotient,0,c
  2658  007838                     l872:
  2659  007838  90D8               	bcf	status,0,c
  2660  00783A  3204               	rrcf	___lwdiv@divisor+1,f,c
  2661  00783C  3203               	rrcf	___lwdiv@divisor,f,c
  2662  00783E  2E07               	decfsz	___lwdiv@counter,f,c
  2663  007840  D7ED               	goto	l864
  2664  007842                     l755:
  2665  007842  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2666  007846  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2667  00784A  0012               	return	
  2668  00784C                     __end_of___lwdiv:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1h	equ	0xFE2
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _SPI_MC_Write *****************
  2689 ;; Defined at:
  2690 ;;		line 96 in file "spi_mc.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  data_out        1    wreg     unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  data_out        1    1[COMRAM] unsigned char 
  2695 ;;  TempVar         1    0[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      unsigned char 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0
  2706 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2708 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2709 ;;Total ram usage:        2 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_SD_Init
  2715 ;;		_SPI_send_cmd
  2716 ;;		_disk_readsectordata
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text13
  2721  0076EA                     __ptext13:
  2722                           	opt stack 0
  2723  0076EA                     _SPI_MC_Write:
  2724                           	opt stack 28
  2725                           
  2726                           ;incstack = 0
  2727                           ;SPI_MC_Write@data_out stored from wreg
  2728  0076EA  6E02               	movwf	SPI_MC_Write@data_out,c
  2729                           
  2730                           ;spi_mc.c: 98: unsigned char TempVar;
  2731                           ;spi_mc.c: 99: TempVar = SSP1BUF;
  2732  0076EC  CFC9 F001          	movff	4041,SPI_MC_Write@TempVar	;volatile
  2733                           
  2734                           ;spi_mc.c: 100: PIR1bits.SSP1IF = 0;
  2735  0076F0  969E               	bcf	3998,3,c	;volatile
  2736                           
  2737                           ;spi_mc.c: 101: SSP1CON1bits.WCOL = 0;
  2738  0076F2  9EC6               	bcf	4038,7,c	;volatile
  2739                           
  2740                           ;spi_mc.c: 102: SSP1BUF = data_out;
  2741  0076F4  C002  FFC9         	movff	SPI_MC_Write@data_out,4041	;volatile
  2742                           
  2743                           ;spi_mc.c: 103: if ( SSP1CON1 & 0x80 )
  2744  0076F8  AEC6               	btfss	4038,7,c	;volatile
  2745  0076FA  D002               	goto	l132
  2746                           
  2747                           ;spi_mc.c: 104: return ( -1 );
  2748  0076FC  0EFF               	movlw	255
  2749  0076FE  0012               	return	
  2750  007700                     l132:
  2751  007700  A69E               	btfss	3998,3,c	;volatile
  2752  007702  D7FE               	goto	l132
  2753                           
  2754                           ;spi_mc.c: 108: return ( SSP1BUF );
  2755  007704  50C9               	movf	4041,w,c	;volatile
  2756  007706  0012               	return	
  2757  007708                     __end_of_SPI_MC_Write:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           postdec1	equ	0xFE5
  2768                           fsr1h	equ	0xFE2
  2769                           fsr1l	equ	0xFE1
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _SPI_MC_Initialize *****************
  2778 ;; Defined at:
  2779 ;;		line 41 in file "spi_mc.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;		None
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;		None
  2784 ;; Return value:  Size  Location     Type
  2785 ;;		None               void
  2786 ;; Registers used:
  2787 ;;		wreg, status,2
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2793 ;;      Params:         0       0       0       0       0       0       0       0       0
  2794 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2796 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2797 ;;Total ram usage:        0 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_SD_Init
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text14
  2807  0076CE                     __ptext14:
  2808                           	opt stack 0
  2809  0076CE                     _SPI_MC_Initialize:
  2810                           	opt stack 28
  2811                           
  2812                           ;spi_mc.c: 43: LATBbits.LATB2 = 1;
  2813                           
  2814                           ;incstack = 0
  2815  0076CE  848A               	bsf	3978,2,c	;volatile
  2816                           
  2817                           ;spi_mc.c: 44: TRISBbits.TRISB2 = 0;
  2818  0076D0  9493               	bcf	3987,2,c	;volatile
  2819                           
  2820                           ;spi_mc.c: 48: LATBbits.LATB1 = 0;
  2821  0076D2  928A               	bcf	3978,1,c	;volatile
  2822                           
  2823                           ;spi_mc.c: 49: LATBbits.LATB3 = 1;
  2824  0076D4  868A               	bsf	3978,3,c	;volatile
  2825                           
  2826                           ;spi_mc.c: 50: TRISBbits.TRISB1 = 0;
  2827  0076D6  9293               	bcf	3987,1,c	;volatile
  2828                           
  2829                           ;spi_mc.c: 51: TRISBbits.TRISB3 = 0;
  2830  0076D8  9693               	bcf	3987,3,c	;volatile
  2831                           
  2832                           ;spi_mc.c: 55: SSP1CON1bits.SSPM = 0b0010;
  2833  0076DA  50C6               	movf	4038,w,c	;volatile
  2834  0076DC  0BF0               	andlw	-16
  2835  0076DE  0902               	iorlw	2
  2836  0076E0  6EC6               	movwf	4038,c	;volatile
  2837                           
  2838                           ;spi_mc.c: 58: SSP1STATbits.CKE = 0 ;
  2839  0076E2  9CC7               	bcf	4039,6,c	;volatile
  2840                           
  2841                           ;spi_mc.c: 59: SSP1CON1bits.CKP = 0 ;
  2842  0076E4  98C6               	bcf	4038,4,c	;volatile
  2843                           
  2844                           ;spi_mc.c: 62: SSP1CON1bits.SSPEN = 1;
  2845  0076E6  8AC6               	bsf	4038,5,c	;volatile
  2846  0076E8  0012               	return	
  2847  0076EA                     __end_of_SPI_MC_Initialize:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1h	equ	0xFE2
  2859                           fsr1l	equ	0xFE1
  2860                           indf2	equ	0xFDF
  2861                           postinc2	equ	0xFDE
  2862                           postdec2	equ	0xFDD
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _SPI_MC_Close *****************
  2868 ;; Defined at:
  2869 ;;		line 78 in file "spi_mc.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;		None               void
  2876 ;; Registers used:
  2877 ;;		status,2, status,0
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2883 ;;      Params:         0       0       0       0       0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2886 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2887 ;;Total ram usage:        0 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_SD_Init
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text15
  2897  007676                     __ptext15:
  2898                           	opt stack 0
  2899  007676                     _SPI_MC_Close:
  2900                           	opt stack 28
  2901                           
  2902                           ;spi_mc.c: 80: SSP1CON1 &= 0xDF;
  2903                           
  2904                           ;incstack = 0
  2905  007676  9AC6               	bcf	4038,5,c	;volatile
  2906  007678  0012               	return	
  2907  00767A                     __end_of_SPI_MC_Close:
  2908                           	opt stack 0
  2909                           tblptru	equ	0xFF8
  2910                           tblptrh	equ	0xFF7
  2911                           tblptrl	equ	0xFF6
  2912                           tablat	equ	0xFF5
  2913                           prodh	equ	0xFF4
  2914                           prodl	equ	0xFF3
  2915                           postinc0	equ	0xFEE
  2916                           wreg	equ	0xFE8
  2917                           postdec1	equ	0xFE5
  2918                           fsr1h	equ	0xFE2
  2919                           fsr1l	equ	0xFE1
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _configUSART *****************
  2928 ;; Defined at:
  2929 ;;		line 72 in file "PICSD.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  spbrg           1    7[COMRAM] unsigned char 
  2934 ;;  config          1    6[COMRAM] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;		None               void
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2944 ;;      Params:         0       0       0       0       0       0       0       0       0
  2945 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2947 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2948 ;;Total ram usage:        2 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    1
  2951 ;; This function calls:
  2952 ;;		_Open1USART
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text16
  2959  0076A0                     __ptext16:
  2960                           	opt stack 0
  2961  0076A0                     _configUSART:
  2962                           	opt stack 29
  2963                           
  2964                           ;PICSD.c: 79: unsigned char config = 0b11111111 & 0b11111111 & 0b11111110 & 0b11111101 &
      +                           0b11111111;
  2965                           
  2966                           ;incstack = 0
  2967  0076A0  0EFC               	movlw	252
  2968  0076A2  6E07               	movwf	configUSART@config,c
  2969                           
  2970                           ;PICSD.c: 80: unsigned char spbrg = 51;
  2971  0076A4  0E33               	movlw	51
  2972  0076A6  6E08               	movwf	configUSART@spbrg,c
  2973                           
  2974                           ;PICSD.c: 81: Open1USART(config, spbrg);
  2975  0076A8  C008  F001         	movff	configUSART@spbrg,Open1USART@spbrg
  2976  0076AC  6A02               	clrf	Open1USART@spbrg+1,c
  2977  0076AE  5007               	movf	configUSART@config,w,c
  2978  0076B0  EC26  F03C         	call	_Open1USART
  2979  0076B4  0012               	return	
  2980  0076B6                     __end_of_configUSART:
  2981                           	opt stack 0
  2982                           tblptru	equ	0xFF8
  2983                           tblptrh	equ	0xFF7
  2984                           tblptrl	equ	0xFF6
  2985                           tablat	equ	0xFF5
  2986                           prodh	equ	0xFF4
  2987                           prodl	equ	0xFF3
  2988                           postinc0	equ	0xFEE
  2989                           wreg	equ	0xFE8
  2990                           postdec1	equ	0xFE5
  2991                           fsr1h	equ	0xFE2
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           postinc2	equ	0xFDE
  2995                           postdec2	equ	0xFDD
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _Open1USART *****************
  3001 ;; Defined at:
  3002 ;;		line 124 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\u1open.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  config          1    wreg     unsigned char 
  3005 ;;  spbrg           2    0[COMRAM] unsigned int 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  config          1    5[COMRAM] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;		None               void
  3010 ;; Registers used:
  3011 ;;		wreg, status,2
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3017 ;;      Params:         2       0       0       0       0       0       0       0       0
  3018 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3019 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3020 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3021 ;;Total ram usage:        6 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_configUSART
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text17
  3031  00784C                     __ptext17:
  3032                           	opt stack 0
  3033  00784C                     _Open1USART:
  3034                           	opt stack 29
  3035                           
  3036                           ;incstack = 0
  3037                           ;Open1USART@config stored from wreg
  3038  00784C  6E06               	movwf	Open1USART@config,c
  3039  00784E  0E00               	movlw	0
  3040  007850  6EAC               	movwf	4012,c	;volatile
  3041  007852  0E00               	movlw	0
  3042  007854  6EAB               	movwf	4011,c	;volatile
  3043  007856  B006               	btfsc	Open1USART@config,0,c
  3044  007858  88AC               	bsf	4012,4,c	;volatile
  3045  00785A  A206               	btfss	Open1USART@config,1,c
  3046  00785C  D002               	goto	l1078
  3047  00785E  8CAC               	bsf	4012,6,c	;volatile
  3048  007860  8CAB               	bsf	4011,6,c	;volatile
  3049  007862                     l1078:
  3050  007862  B406               	btfsc	Open1USART@config,2,c
  3051  007864  8EAC               	bsf	4012,7,c	;volatile
  3052  007866  A606               	btfss	Open1USART@config,3,c
  3053  007868  D002               	goto	l216
  3054  00786A  88AB               	bsf	4011,4,c	;volatile
  3055  00786C  D001               	goto	l1086
  3056  00786E                     l216:
  3057  00786E  8AAB               	bsf	4011,5,c	;volatile
  3058  007870                     l1086:
  3059  007870  B806               	btfsc	Open1USART@config,4,c
  3060  007872  84AC               	bsf	4012,2,c	;volatile
  3061  007874  BA06               	btfsc	Open1USART@config,5,c
  3062  007876  86AB               	bsf	4011,3,c	;volatile
  3063  007878  AC06               	btfss	Open1USART@config,6,c
  3064  00787A  D002               	goto	l220
  3065  00787C  8A9D               	bsf	3997,5,c	;volatile
  3066  00787E  D001               	goto	l1098
  3067  007880                     l220:
  3068  007880  9A9D               	bcf	3997,5,c	;volatile
  3069  007882                     l1098:
  3070  007882  AE06               	btfss	Open1USART@config,7,c
  3071  007884  D002               	goto	l222
  3072  007886  889D               	bsf	3997,4,c	;volatile
  3073  007888  D001               	goto	l223
  3074  00788A                     l222:
  3075  00788A  989D               	bcf	3997,4,c	;volatile
  3076  00788C                     l223:
  3077  00788C  C001  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  3078  007890  C002  F003         	movff	Open1USART@spbrg+1,??_Open1USART
  3079  007894  C003  F004         	movff	??_Open1USART,??_Open1USART+1
  3080  007898  6A05               	clrf	(??_Open1USART+2)& (0+255),c
  3081  00789A  5004               	movf	??_Open1USART+1,w,c
  3082  00789C  6EB0               	movwf	4016,c	;volatile
  3083  00789E  8AAC               	bsf	4012,5,c	;volatile
  3084  0078A0  8EAB               	bsf	4011,7,c	;volatile
  3085  0078A2  0012               	return	
  3086  0078A4                     __end_of_Open1USART:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           postinc0	equ	0xFEE
  3095                           wreg	equ	0xFE8
  3096                           postdec1	equ	0xFE5
  3097                           fsr1h	equ	0xFE2
  3098                           fsr1l	equ	0xFE1
  3099                           indf2	equ	0xFDF
  3100                           postinc2	equ	0xFDE
  3101                           postdec2	equ	0xFDD
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _configOscillator *****************
  3107 ;; Defined at:
  3108 ;;		line 44 in file "PICSD.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, status,2
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; This function calls:
  3129 ;;		Nothing
  3130 ;; This function is called by:
  3131 ;;		_main
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text18
  3136  00767A                     __ptext18:
  3137                           	opt stack 0
  3138  00767A                     _configOscillator:
  3139                           	opt stack 30
  3140                           
  3141                           ;PICSD.c: 56: OSCCON = 0x66;
  3142                           
  3143                           ;incstack = 0
  3144  00767A  0E66               	movlw	102
  3145  00767C  6ED3               	movwf	4051,c	;volatile
  3146  00767E  0012               	return	
  3147  007680                     __end_of_configOscillator:
  3148                           	opt stack 0
  3149                           tblptru	equ	0xFF8
  3150                           tblptrh	equ	0xFF7
  3151                           tblptrl	equ	0xFF6
  3152                           tablat	equ	0xFF5
  3153                           prodh	equ	0xFF4
  3154                           prodl	equ	0xFF3
  3155                           postinc0	equ	0xFEE
  3156                           wreg	equ	0xFE8
  3157                           postdec1	equ	0xFE5
  3158                           fsr1h	equ	0xFE2
  3159                           fsr1l	equ	0xFE1
  3160                           indf2	equ	0xFDF
  3161                           postinc2	equ	0xFDE
  3162                           postdec2	equ	0xFDD
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           postdec1	equ	0xFE5
  3175                           fsr1h	equ	0xFE2
  3176                           fsr1l	equ	0xFE1
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184                           	psect	rparam
  3185  0000                     tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           postdec1	equ	0xFE5
  3194                           fsr1h	equ	0xFE2
  3195                           fsr1l	equ	0xFE1
  3196                           indf2	equ	0xFDF
  3197                           postinc2	equ	0xFDE
  3198                           postdec2	equ	0xFDD
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8


Data Sizes:
    Strings     380
    Constant    18
    Data        0
    BSS         1025
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_19(CODE[3]), STR_18(CODE[8]), STR_17(CODE[18]), STR_16(CODE[20]), 
		 -> STR_15(CODE[14]), STR_14(CODE[19]), STR_13(CODE[19]), STR_12(CODE[23]), 
		 -> STR_11(CODE[31]), STR_10(CODE[18]), STR_9(CODE[22]), STR_8(CODE[30]), 
		 -> STR_7(CODE[17]), STR_6(CODE[22]), STR_5(CODE[30]), STR_4(CODE[17]), 
		 -> STR_3(CODE[25]), STR_2(CODE[19]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S799$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_disk_readsector
    _disk_readsector->_SPI_send_cmd
    _disk_readsectordata->_printf
    _disk_initialize->_SD_Init
    _SD_Init->_SPI_send_cmd
    _SPI_send_cmd->_printf
    _printf->___lwmod
    _putch->_Write1USART
    ___lwmod->___lwdiv
    _configUSART->_Open1USART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   19643
                                             52 COMRAM     4     4      0
                   _configOscillator
                        _configUSART
                    _disk_initialize
                    _disk_readsector
                             _printf
 ---------------------------------------------------------------------------------
 (1) _disk_readsector                                      9     5      4    8488
                                             43 COMRAM     9     5      4
                       _SPI_send_cmd
                _disk_readsectordata
                             _printf
 ---------------------------------------------------------------------------------
 (2) _disk_readsectordata                                  6     6      0    2733
                                             35 COMRAM     6     6      0
                       _SPI_MC_Write
                             _printf
 ---------------------------------------------------------------------------------
 (1) _disk_initialize                                      0     0      0    8327
                            _SD_Init
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SD_Init                                              3     3      0    5746
                                             43 COMRAM     3     3      0
                       _SPI_MC_Close
                  _SPI_MC_Initialize
                       _SPI_MC_Write
                       _SPI_send_cmd
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SPI_send_cmd                                         9     5      4    3031
                                             35 COMRAM     8     4      4
                       _SPI_MC_Write
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6    2581
                                             12 COMRAM    23    17      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      30
                                              1 COMRAM     1     1      0
                        _Write1USART
 ---------------------------------------------------------------------------------
 (3) _Write1USART                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     191
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     191
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     277
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _SPI_MC_Write                                         2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SPI_MC_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SPI_MC_Close                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configUSART                                          2     2      0     223
                                              6 COMRAM     2     2      0
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           6     4      2     193
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _configOscillator                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configOscillator
   _configUSART
     _Open1USART
   _disk_initialize
     _SD_Init
       _SPI_MC_Close
       _SPI_MC_Initialize
       _SPI_MC_Write
       _SPI_send_cmd
         _SPI_MC_Write
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _Write1USART
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _Write1USART
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _Write1USART
   _disk_readsector
     _SPI_send_cmd
       _SPI_MC_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _Write1USART
     _disk_readsectordata
       _SPI_MC_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _Write1USART
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _Write1USART
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _Write1USART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     400      21       50.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     38      39       1       60.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39       6        0.0%
DATA                 0      0     439       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Feb 21 23:54:29 2015

 __end_of_disk_readsectordata 79B4                            l25 7688                            l85 7A4C  
         ___wmul@multiplicand 0003                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l220 7880  
                         l132 7700                           l222 788A                           l223 788C  
                         l216 786E                           l184 7DAA                           l832 769A  
                         l755 7842                           l860 7810                           l765 77A6  
                         l862 7818                           l872 7838                           l864 781C  
                         l880 777C                           l882 7784                           l884 7788  
                         l888 779C                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         u965 78DE                           u987 79EE         __size_of_SPI_send_cmd 00B0  
                         wreg 000FE8                    _TXSTA1bits 000FAC                  __CFG_LVP$OFF 000000  
                SD_Init@Count 002D                          l1312 7C86                          l1314 7CAE  
                        l1306 7C7C                          l1410 7A0E                          l1332 7D00  
                        l1308 7C80                          l1412 7A1C                          l1404 79E8  
                        l1420 7A42                          l1086 7870                          l1078 7862  
                        l1350 7D48                          l1318 7CC8                          l1502 7B96  
                        l1416 7A32                          l1512 7914                          l1098 7882  
                        l1370 7DB0                          l1354 7D6C                          l1282 7BCC  
                        l1276 7720                          l1372 7DF4                          l1380 7E4A  
                        l1364 7D8E                          l1356 7D74                          l1348 7D38  
                        l1292 7BF0                          l1452 7AA8                          l1382 7E50  
                        l1366 7D96                          l1286 7BDC                          l1542 79A4  
                        l1526 7956                          l1288 7BEA                          l1384 7E58  
                        l1456 7ABE                          l1378 7E3A                          l1298 7C1E  
                        l1474 7B1C                          l1466 7ADC                          l1492 7B78  
                        l1484 7B3A                          l1578 77D8                          STR_1 7EDE  
                        STR_2 7F7F                          STR_3 7EFC                          STR_4 7FC7  
                        STR_5 7EA2                          STR_6 7F2C                          STR_7 7FD8  
                        STR_8 7EC0                          STR_9 7F42                          _main 77B0  
             __end_of_SD_Init 7BC2                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
               __CFG_BORV$190 000000                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                _SPI_send_cmd 79B4                 diskio@secdata 0600                         ?_main 0001  
                       STR_10 7F92                         STR_11 7E83                         STR_20 7FB6  
                       STR_12 7F15                         STR_13 7F6C                         STR_14 7F6C  
                       STR_15 7FE9                         STR_16 7F58                         STR_17 7FA4  
                       STR_18 7FF7                         STR_19 7EBD               __end_of___lwdiv 784C  
             __end_of___lwmod 77B0                 __CFG_WDTEN$ON 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000     __size_of_configOscillator 0006  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers 7E7B               __end_of_isdigit 7728  
                       _putch 7680           SPI_MC_Write@TempVar 0001                         tablat 000FF5  
                       status 000FD8                __CFG_T3CMX$RC0 000000                __CFG_ICPRT$OFF 000000  
             __initialization 7728                  __end_of_main 77FA                __CFG_PCLKEN$ON 000000  
                  _Open1USART 784C                        ??_main 0035                 __activetblptr 000002  
              __CFG_SDOMX$RB3 000000               __CFG_CCP2MX$RC1 000000                     ??_SD_Init 002C  
                      ?_putch 0001                        _RCSTA1 000FAB                        _OSCCON 000FD3  
                      _SPBRG1 000FAF                        _TXREG1 000FAD                        _TXSTA1 000FAC  
    __size_of_disk_initialize 0018          __size_of_configUSART 0016                __CFG_XINST$OFF 000000  
    __size_of_disk_readsector 006E                        ___wmul 7748                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 7730  
                      _printf 7BC2                     ??_isdigit 0001            disk_readsector@sec 002C  
          disk_readsector@res 0034                  __mediumconst 7E70                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8          __CFG_LS48MHZ$SYS24X4 000000  
                  __accesstop 0060       __end_of__initialization 773E               __CFG_PBADEN$OFF 000000  
        SPI_MC_Write@data_out 0002             SPI_send_cmd@retry 002A                __pcstackCOMRAM 0001  
            __CFG_nPWRTEN$OFF 000000                 __end_of_putch 768E                   ?_Open1USART 0001  
            _configOscillator 767A                       ??_putch 0002               SPI_send_cmd@cmd 0029  
             SPI_send_cmd@arg 0024               SPI_send_cmd@res 002B                 ??_Write1USART 0001  
           __CFG_PLLSEL$PLL4X 000000                       ?___wmul 0001             ??_disk_initialize 002F  
                     ?_printf 000D              configUSART@spbrg 0008             ??_disk_readsector 0030  
__size_of_disk_readsectordata 00A2             _SPI_MC_Initialize 76CE              Open1USART@config 0006  
          ?_SPI_MC_Initialize 0001                       _SPBRGH1 000FB0                       _SSP1BUF 000FC9  
                     _SD_Init 7A64           ??_SPI_MC_Initialize 0001           __size_of_Open1USART 0058  
                     __Hparam 0000                       __Lparam 0000           __end_of_Write1USART 76A0  
             __size_of___wmul 0026                       ___lwdiv 77FA                       ___lwmod 776E  
                     __pcinit 7728     __end_of_SPI_MC_Initialize 76EA                       __ramtop 0800  
                     __ptext0 77B0                       __ptext1 78A4                       __ptext2 7912  
                     __ptext3 76B6                       __ptext4 7A64                       __ptext5 79B4  
                     __ptext6 7BC2                       __ptext7 7680                       __ptext8 768E  
                     __ptext9 7708               __size_of_printf 02AE             __end_of_hexpowers 7E83  
                     _dpowers 7E71                       _isdigit 7708                       _secdata 0400  
                     main@sec 0035          end_of_initialization 773E                 __Lmediumconst 7E70  
                     printf@c 0023                       printf@f 000D                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
               ?_SPI_MC_Close 0001                 ?_SPI_MC_Write 0001                     _TRISBbits 000F93  
               ??_configUSART 0007                   _Write1USART 768E                   printf@width 0021  
    __end_of_configOscillator 7680                ??_SPI_MC_Close 0001                __end_of___wmul 776E  
              ??_SPI_MC_Write 0001                  ??_Open1USART 0003    __size_of_SPI_MC_Initialize 001C  
              __end_of_printf 7E70           start_initialization 7728               __CFG_nLPBOR$OFF 000000  
         _disk_readsectordata 7912               _disk_initialize 76B6            __end_of_Open1USART 78A4  
             _disk_readsector 78A4           __end_of_configUSART 76B6                      ??___wmul 0005  
               ?_SPI_send_cmd 0024                      ??_printf 0013          ?_disk_readsectordata 0001  
                 __pbssBIGRAM 0400                   __pbssCOMRAM 0039           __end_of__stringdata 7FFF  
                _isdigit$1326 0002                      ?_SD_Init 0001              ___lwdiv@dividend 0001  
               __pmediumconst 7E70                ??_SPI_send_cmd 0028                      ?___lwdiv 0001  
                    ?___lwmod 0008               Open1USART@spbrg 0001         ??_disk_readsectordata 0024  
                    ?_isdigit 0001             configUSART@config 0007        disk_readsectordata@res 0025  
                   _hexpowers 7E7B              ___lwdiv@quotient 0005       __end_of_disk_initialize 76CE  
             Write1USART@data 0001                __size_of_putch 000E          __end_of_SPI_MC_Close 767A  
     __end_of_disk_readsector 7912          __end_of_SPI_MC_Write 7708                ___wmul@product 0005  
                    _LATBbits 000F8A                   _configUSART 76A0                      _PIE1bits 000F9D  
                    _PIR1bits 000F9E              __CFG_WDTPS$32768 000000                      _SSP1CON1 000FC6  
                 __stringdata 7E83             ___wmul@multiplier 0001                    printf@_val 001B  
                  printf@flag 0020                    printf@prec 001A             __CFG_CFGPLLEN$OFF 000000  
            __size_of_SD_Init 015E                  ?_Write1USART 0001                      __Hrparam 0000  
    disk_readsectordata@x_303 0028                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
           ?_configOscillator 0001            ??_configOscillator 0001              __size_of___lwdiv 0052  
            __size_of___lwmod 0042              __size_of_isdigit 0020               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                      __ptext10 7748                      __ptext11 776E  
                    __ptext12 77FA                      __ptext13 76EA                      __ptext14 76CE  
                    __ptext15 7676                      __ptext16 76A0                      __ptext17 784C  
                    __ptext18 767A                  _SSP1CON1bits 000FC6              ?_disk_initialize 0001  
        __end_of_SPI_send_cmd 7A64              ?_disk_readsector 002C                 __size_of_main 004A  
                   printf@idx 0019                  _SSP1STATbits 000FC7                 _USART1_Status 0039  
                   putch@data 0002         __size_of_SPI_MC_Close 0004                      isdigit@c 0003  
       __size_of_SPI_MC_Write 001E              ___lwmod@dividend 0008                    _RCSTA1bits 000FAB  
        disk_readsectordata@x 0026                      printf@ap 0017          __CFG_CPUDIV$NOCLKDIV 000000  
                _SPI_MC_Close 7676                  _SPI_MC_Write 76EA               ___lwmod@divisor 000A  
             ___lwmod@counter 000C            __CFG_FOSC$INTOSCIO 000000                  ?_configUSART 0001  
        __size_of_Write1USART 0012  
